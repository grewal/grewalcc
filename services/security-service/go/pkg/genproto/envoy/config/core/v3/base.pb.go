// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: envoy/config/core/v3/base.proto

package corev3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	v31 "github.com/cncf/xds/go/xds/core/v3"
	_ "github.com/envoyproxy/go-control-plane/envoy/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Envoy supports :ref:`upstream priority routing
// <arch_overview_http_routing_priority>` both at the route and the virtual
// cluster level. The current priority implementation uses different connection
// pool and circuit breaking settings for each priority level. This means that
// even for HTTP/2 requests, two physical connections will be used to an
// upstream host. In the future Envoy will likely support true HTTP/2 priority
// over a single upstream connection.
type RoutingPriority int32

const (
	RoutingPriority_DEFAULT RoutingPriority = 0
	RoutingPriority_HIGH    RoutingPriority = 1
)

// Enum value maps for RoutingPriority.
var (
	RoutingPriority_name = map[int32]string{
		0: "DEFAULT",
		1: "HIGH",
	}
	RoutingPriority_value = map[string]int32{
		"DEFAULT": 0,
		"HIGH":    1,
	}
)

func (x RoutingPriority) Enum() *RoutingPriority {
	p := new(RoutingPriority)
	*p = x
	return p
}

func (x RoutingPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_core_v3_base_proto_enumTypes[0].Descriptor()
}

func (RoutingPriority) Type() protoreflect.EnumType {
	return &file_envoy_config_core_v3_base_proto_enumTypes[0]
}

func (x RoutingPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingPriority.Descriptor instead.
func (RoutingPriority) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{0}
}

// HTTP request method.
type RequestMethod int32

const (
	RequestMethod_METHOD_UNSPECIFIED RequestMethod = 0
	RequestMethod_GET                RequestMethod = 1
	RequestMethod_HEAD               RequestMethod = 2
	RequestMethod_POST               RequestMethod = 3
	RequestMethod_PUT                RequestMethod = 4
	RequestMethod_DELETE             RequestMethod = 5
	RequestMethod_CONNECT            RequestMethod = 6
	RequestMethod_OPTIONS            RequestMethod = 7
	RequestMethod_TRACE              RequestMethod = 8
	RequestMethod_PATCH              RequestMethod = 9
)

// Enum value maps for RequestMethod.
var (
	RequestMethod_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "GET",
		2: "HEAD",
		3: "POST",
		4: "PUT",
		5: "DELETE",
		6: "CONNECT",
		7: "OPTIONS",
		8: "TRACE",
		9: "PATCH",
	}
	RequestMethod_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"GET":                1,
		"HEAD":               2,
		"POST":               3,
		"PUT":                4,
		"DELETE":             5,
		"CONNECT":            6,
		"OPTIONS":            7,
		"TRACE":              8,
		"PATCH":              9,
	}
)

func (x RequestMethod) Enum() *RequestMethod {
	p := new(RequestMethod)
	*p = x
	return p
}

func (x RequestMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_core_v3_base_proto_enumTypes[1].Descriptor()
}

func (RequestMethod) Type() protoreflect.EnumType {
	return &file_envoy_config_core_v3_base_proto_enumTypes[1]
}

func (x RequestMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestMethod.Descriptor instead.
func (RequestMethod) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{1}
}

// Identifies the direction of the traffic relative to the local Envoy.
type TrafficDirection int32

const (
	// Default option is unspecified.
	TrafficDirection_UNSPECIFIED TrafficDirection = 0
	// The transport is used for incoming traffic.
	TrafficDirection_INBOUND TrafficDirection = 1
	// The transport is used for outgoing traffic.
	TrafficDirection_OUTBOUND TrafficDirection = 2
)

// Enum value maps for TrafficDirection.
var (
	TrafficDirection_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INBOUND",
		2: "OUTBOUND",
	}
	TrafficDirection_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INBOUND":     1,
		"OUTBOUND":    2,
	}
)

func (x TrafficDirection) Enum() *TrafficDirection {
	p := new(TrafficDirection)
	*p = x
	return p
}

func (x TrafficDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_core_v3_base_proto_enumTypes[2].Descriptor()
}

func (TrafficDirection) Type() protoreflect.EnumType {
	return &file_envoy_config_core_v3_base_proto_enumTypes[2]
}

func (x TrafficDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficDirection.Descriptor instead.
func (TrafficDirection) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{2}
}

// Describes the supported actions types for key/value pair append action.
type KeyValueAppend_KeyValueAppendAction int32

const (
	// If the key already exists, this action will result in the following behavior:
	//
	// - Comma-concatenated value if multiple values are not allowed.
	// - New value added to the list of values if multiple values are allowed.
	//
	// If the key doesn't exist then this will add pair with specified key and value.
	KeyValueAppend_APPEND_IF_EXISTS_OR_ADD KeyValueAppend_KeyValueAppendAction = 0
	// This action will add the key/value pair if it doesn't already exist. If the
	// key already exists then this will be a no-op.
	KeyValueAppend_ADD_IF_ABSENT KeyValueAppend_KeyValueAppendAction = 1
	// This action will overwrite the specified value by discarding any existing
	// values if the key already exists. If the key doesn't exist then this will add
	// the pair with specified key and value.
	KeyValueAppend_OVERWRITE_IF_EXISTS_OR_ADD KeyValueAppend_KeyValueAppendAction = 2
	// This action will overwrite the specified value by discarding any existing
	// values if the key already exists. If the key doesn't exist then this will
	// be no-op.
	KeyValueAppend_OVERWRITE_IF_EXISTS KeyValueAppend_KeyValueAppendAction = 3
)

// Enum value maps for KeyValueAppend_KeyValueAppendAction.
var (
	KeyValueAppend_KeyValueAppendAction_name = map[int32]string{
		0: "APPEND_IF_EXISTS_OR_ADD",
		1: "ADD_IF_ABSENT",
		2: "OVERWRITE_IF_EXISTS_OR_ADD",
		3: "OVERWRITE_IF_EXISTS",
	}
	KeyValueAppend_KeyValueAppendAction_value = map[string]int32{
		"APPEND_IF_EXISTS_OR_ADD":    0,
		"ADD_IF_ABSENT":              1,
		"OVERWRITE_IF_EXISTS_OR_ADD": 2,
		"OVERWRITE_IF_EXISTS":        3,
	}
)

func (x KeyValueAppend_KeyValueAppendAction) Enum() *KeyValueAppend_KeyValueAppendAction {
	p := new(KeyValueAppend_KeyValueAppendAction)
	*p = x
	return p
}

func (x KeyValueAppend_KeyValueAppendAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyValueAppend_KeyValueAppendAction) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_core_v3_base_proto_enumTypes[3].Descriptor()
}

func (KeyValueAppend_KeyValueAppendAction) Type() protoreflect.EnumType {
	return &file_envoy_config_core_v3_base_proto_enumTypes[3]
}

func (x KeyValueAppend_KeyValueAppendAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyValueAppend_KeyValueAppendAction.Descriptor instead.
func (KeyValueAppend_KeyValueAppendAction) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{11, 0}
}

// Describes the supported actions types for header append action.
type HeaderValueOption_HeaderAppendAction int32

const (
	// If the header already exists, this action will result in:
	//
	// - Comma-concatenated for predefined inline headers.
	// - Duplicate header added in the “HeaderMap“ for other headers.
	//
	// If the header doesn't exist then this will add new header with specified key and value.
	HeaderValueOption_APPEND_IF_EXISTS_OR_ADD HeaderValueOption_HeaderAppendAction = 0
	// This action will add the header if it doesn't already exist. If the header
	// already exists then this will be a no-op.
	HeaderValueOption_ADD_IF_ABSENT HeaderValueOption_HeaderAppendAction = 1
	// This action will overwrite the specified value by discarding any existing values if
	// the header already exists. If the header doesn't exist then this will add the header
	// with specified key and value.
	HeaderValueOption_OVERWRITE_IF_EXISTS_OR_ADD HeaderValueOption_HeaderAppendAction = 2
	// This action will overwrite the specified value by discarding any existing values if
	// the header already exists. If the header doesn't exist then this will be no-op.
	HeaderValueOption_OVERWRITE_IF_EXISTS HeaderValueOption_HeaderAppendAction = 3
)

// Enum value maps for HeaderValueOption_HeaderAppendAction.
var (
	HeaderValueOption_HeaderAppendAction_name = map[int32]string{
		0: "APPEND_IF_EXISTS_OR_ADD",
		1: "ADD_IF_ABSENT",
		2: "OVERWRITE_IF_EXISTS_OR_ADD",
		3: "OVERWRITE_IF_EXISTS",
	}
	HeaderValueOption_HeaderAppendAction_value = map[string]int32{
		"APPEND_IF_EXISTS_OR_ADD":    0,
		"ADD_IF_ABSENT":              1,
		"OVERWRITE_IF_EXISTS_OR_ADD": 2,
		"OVERWRITE_IF_EXISTS":        3,
	}
)

func (x HeaderValueOption_HeaderAppendAction) Enum() *HeaderValueOption_HeaderAppendAction {
	p := new(HeaderValueOption_HeaderAppendAction)
	*p = x
	return p
}

func (x HeaderValueOption_HeaderAppendAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderValueOption_HeaderAppendAction) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_core_v3_base_proto_enumTypes[4].Descriptor()
}

func (HeaderValueOption_HeaderAppendAction) Type() protoreflect.EnumType {
	return &file_envoy_config_core_v3_base_proto_enumTypes[4]
}

func (x HeaderValueOption_HeaderAppendAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderValueOption_HeaderAppendAction.Descriptor instead.
func (HeaderValueOption_HeaderAppendAction) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{15, 0}
}

// Identifies location of where either Envoy runs or where upstream hosts run.
type Locality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Region this :ref:`zone <envoy_v3_api_field_config.core.v3.Locality.zone>` belongs to.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Defines the local service zone where Envoy is running. Though optional, it
	// should be set if discovery service routing is used and the discovery
	// service exposes :ref:`zone data <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.locality>`,
	// either in this message or via :option:`--service-zone`. The meaning of zone
	// is context dependent, e.g. `Availability Zone (AZ)
	// <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
	// on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
	// GCP, etc.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// When used for locality of upstream hosts, this field further splits zone
	// into smaller chunks of sub-zones so they can be load balanced
	// independently.
	SubZone       string `protobuf:"bytes,3,opt,name=sub_zone,json=subZone,proto3" json:"sub_zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Locality) Reset() {
	*x = Locality{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Locality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locality) ProtoMessage() {}

func (x *Locality) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locality.ProtoReflect.Descriptor instead.
func (*Locality) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{0}
}

func (x *Locality) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Locality) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Locality) GetSubZone() string {
	if x != nil {
		return x.SubZone
	}
	return ""
}

// BuildVersion combines SemVer version of extension with free-form build information
// (i.e. 'alpha', 'private-build') as a set of strings.
type BuildVersion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SemVer version of extension.
	Version *v3.SemanticVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Free-form build information.
	// Envoy defines several well known keys in the source/common/version/version.h file
	Metadata      *structpb.Struct `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildVersion) Reset() {
	*x = BuildVersion{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildVersion) ProtoMessage() {}

func (x *BuildVersion) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildVersion.ProtoReflect.Descriptor instead.
func (*BuildVersion) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{1}
}

func (x *BuildVersion) GetVersion() *v3.SemanticVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *BuildVersion) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Version and identification for an Envoy extension.
// [#next-free-field: 7]
type Extension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the name of the Envoy filter as specified in the Envoy
	// configuration, e.g. envoy.filters.http.router, com.acme.widget.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Category of the extension.
	// Extension category names use reverse DNS notation. For instance "envoy.filters.listener"
	// for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from
	// acme.com vendor.
	// [#comment:TODO(yanavlasov): Link to the doc with existing envoy category names.]
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// [#not-implemented-hide:] Type descriptor of extension configuration proto.
	// [#comment:TODO(yanavlasov): Link to the doc with existing configuration protos.]
	// [#comment:TODO(yanavlasov): Add tests when PR #9391 lands.]
	//
	// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
	TypeDescriptor string `protobuf:"bytes,3,opt,name=type_descriptor,json=typeDescriptor,proto3" json:"type_descriptor,omitempty"`
	// The version is a property of the extension and maintained independently
	// of other extensions and the Envoy API.
	// This field is not set when extension did not provide version information.
	Version *BuildVersion `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Indicates that the extension is present but was disabled via dynamic configuration.
	Disabled bool `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Type URLs of extension configuration protos.
	TypeUrls      []string `protobuf:"bytes,6,rep,name=type_urls,json=typeUrls,proto3" json:"type_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Extension) Reset() {
	*x = Extension{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{2}
}

func (x *Extension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Extension) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
func (x *Extension) GetTypeDescriptor() string {
	if x != nil {
		return x.TypeDescriptor
	}
	return ""
}

func (x *Extension) GetVersion() *BuildVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Extension) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Extension) GetTypeUrls() []string {
	if x != nil {
		return x.TypeUrls
	}
	return nil
}

// Identifies a specific Envoy instance. The node identifier is presented to the
// management server, which may use this identifier to distinguish per Envoy
// configuration for serving.
// [#next-free-field: 13]
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An opaque node identifier for the Envoy node. This also provides the local
	// service node name. It should be set if any of the following features are
	// used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS
	// <config_cluster_manager_cds>`, and :ref:`HTTP tracing
	// <arch_overview_tracing>`, either in this message or via
	// :option:`--service-node`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Defines the local service cluster name where Envoy is running. Though
	// optional, it should be set if any of the following features are used:
	// :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster
	// verification
	// <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher>`,
	// :ref:`runtime override directory <envoy_v3_api_msg_config.bootstrap.v3.Runtime>`,
	// :ref:`user agent addition
	// <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.add_user_agent>`,
	// :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,
	// :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing
	// <arch_overview_tracing>`, either in this message or via
	// :option:`--service-cluster`.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Opaque metadata extending the node identifier. Envoy will pass this
	// directly to the management server.
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike
	// other fields in this message). For example, the xDS client may have a shard identifier that
	// changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the
	// dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic
	// parameter then appears in this field during future discovery requests.
	DynamicParameters map[string]*v31.ContextParams `protobuf:"bytes,12,rep,name=dynamic_parameters,json=dynamicParameters,proto3" json:"dynamic_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Locality specifying where the Envoy instance is running.
	Locality *Locality `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	// Free-form string that identifies the entity requesting config.
	// E.g. "envoy" or "grpc"
	UserAgentName string `protobuf:"bytes,6,opt,name=user_agent_name,json=userAgentName,proto3" json:"user_agent_name,omitempty"`
	// Types that are valid to be assigned to UserAgentVersionType:
	//
	//	*Node_UserAgentVersion
	//	*Node_UserAgentBuildVersion
	UserAgentVersionType isNode_UserAgentVersionType `protobuf_oneof:"user_agent_version_type"`
	// List of extensions and their versions supported by the node.
	Extensions []*Extension `protobuf:"bytes,9,rep,name=extensions,proto3" json:"extensions,omitempty"`
	// Client feature support list. These are well known features described
	// in the Envoy API repository for a given major version of an API. Client features
	// use reverse DNS naming scheme, for example “com.acme.feature“.
	// See :ref:`the list of features <client_features>` that xDS client may
	// support.
	ClientFeatures []string `protobuf:"bytes,10,rep,name=client_features,json=clientFeatures,proto3" json:"client_features,omitempty"`
	// Known listening ports on the node as a generic hint to the management server
	// for filtering :ref:`listeners <config_listeners>` to be returned. For example,
	// if there is a listener bound to port 80, the list can optionally contain the
	// SocketAddress “(0.0.0.0,80)“. The field is optional and just a hint.
	//
	// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
	ListeningAddresses []*Address `protobuf:"bytes,11,rep,name=listening_addresses,json=listeningAddresses,proto3" json:"listening_addresses,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Node) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Node) GetDynamicParameters() map[string]*v31.ContextParams {
	if x != nil {
		return x.DynamicParameters
	}
	return nil
}

func (x *Node) GetLocality() *Locality {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *Node) GetUserAgentName() string {
	if x != nil {
		return x.UserAgentName
	}
	return ""
}

func (x *Node) GetUserAgentVersionType() isNode_UserAgentVersionType {
	if x != nil {
		return x.UserAgentVersionType
	}
	return nil
}

func (x *Node) GetUserAgentVersion() string {
	if x != nil {
		if x, ok := x.UserAgentVersionType.(*Node_UserAgentVersion); ok {
			return x.UserAgentVersion
		}
	}
	return ""
}

func (x *Node) GetUserAgentBuildVersion() *BuildVersion {
	if x != nil {
		if x, ok := x.UserAgentVersionType.(*Node_UserAgentBuildVersion); ok {
			return x.UserAgentBuildVersion
		}
	}
	return nil
}

func (x *Node) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Node) GetClientFeatures() []string {
	if x != nil {
		return x.ClientFeatures
	}
	return nil
}

// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
func (x *Node) GetListeningAddresses() []*Address {
	if x != nil {
		return x.ListeningAddresses
	}
	return nil
}

type isNode_UserAgentVersionType interface {
	isNode_UserAgentVersionType()
}

type Node_UserAgentVersion struct {
	// Free-form string that identifies the version of the entity requesting config.
	// E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
	UserAgentVersion string `protobuf:"bytes,7,opt,name=user_agent_version,json=userAgentVersion,proto3,oneof"`
}

type Node_UserAgentBuildVersion struct {
	// Structured version of the entity requesting config.
	UserAgentBuildVersion *BuildVersion `protobuf:"bytes,8,opt,name=user_agent_build_version,json=userAgentBuildVersion,proto3,oneof"`
}

func (*Node_UserAgentVersion) isNode_UserAgentVersionType() {}

func (*Node_UserAgentBuildVersion) isNode_UserAgentVersionType() {}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map, usually from
// filter name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// Another example use of metadata is to per service config info in cluster metadata, which may get
// consumed by multiple filters.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
//
//   - “{"envoy.lb": {"canary": <bool> }}“ This indicates the canary status of an
//     endpoint and is also used during header processing
//     (x-envoy-upstream-canary) and for stats purposes.
//
// [#next-major-version: move to type/metadata/v2]
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key is the reverse DNS filter name, e.g. com.acme.widget. The “envoy.*“
	// namespace is reserved for Envoy's built-in filters.
	// If both “filter_metadata“ and
	// :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
	// fields are present in the metadata with same keys,
	// only “typed_filter_metadata“ field will be parsed.
	FilterMetadata map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=filter_metadata,json=filterMetadata,proto3" json:"filter_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Key is the reverse DNS filter name, e.g. com.acme.widget. The “envoy.*“
	// namespace is reserved for Envoy's built-in filters.
	// The value is encoded as google.protobuf.Any.
	// If both :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
	// and “typed_filter_metadata“ fields are present in the metadata with same keys,
	// only “typed_filter_metadata“ field will be parsed.
	TypedFilterMetadata map[string]*anypb.Any `protobuf:"bytes,2,rep,name=typed_filter_metadata,json=typedFilterMetadata,proto3" json:"typed_filter_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetFilterMetadata() map[string]*structpb.Struct {
	if x != nil {
		return x.FilterMetadata
	}
	return nil
}

func (x *Metadata) GetTypedFilterMetadata() map[string]*anypb.Any {
	if x != nil {
		return x.TypedFilterMetadata
	}
	return nil
}

// Runtime derived uint32 with a default when not specified.
type RuntimeUInt32 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Default value if runtime value is not available.
	DefaultValue uint32 `protobuf:"varint,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Runtime key to get value for comparison. This value is used if defined.
	RuntimeKey    string `protobuf:"bytes,3,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeUInt32) Reset() {
	*x = RuntimeUInt32{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeUInt32) ProtoMessage() {}

func (x *RuntimeUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeUInt32.ProtoReflect.Descriptor instead.
func (*RuntimeUInt32) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{5}
}

func (x *RuntimeUInt32) GetDefaultValue() uint32 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *RuntimeUInt32) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// Runtime derived percentage with a default when not specified.
type RuntimePercent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Default value if runtime value is not available.
	DefaultValue *v3.Percent `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Runtime key to get value for comparison. This value is used if defined.
	RuntimeKey    string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimePercent) Reset() {
	*x = RuntimePercent{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimePercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimePercent) ProtoMessage() {}

func (x *RuntimePercent) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimePercent.ProtoReflect.Descriptor instead.
func (*RuntimePercent) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{6}
}

func (x *RuntimePercent) GetDefaultValue() *v3.Percent {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RuntimePercent) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// Runtime derived double with a default when not specified.
type RuntimeDouble struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Default value if runtime value is not available.
	DefaultValue float64 `protobuf:"fixed64,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Runtime key to get value for comparison. This value is used if defined.
	RuntimeKey    string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeDouble) Reset() {
	*x = RuntimeDouble{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeDouble) ProtoMessage() {}

func (x *RuntimeDouble) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeDouble.ProtoReflect.Descriptor instead.
func (*RuntimeDouble) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{7}
}

func (x *RuntimeDouble) GetDefaultValue() float64 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

func (x *RuntimeDouble) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// Runtime derived bool with a default when not specified.
type RuntimeFeatureFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Default value if runtime value is not available.
	DefaultValue *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Runtime key to get value for comparison. This value is used if defined. The boolean value must
	// be represented via its
	// `canonical JSON encoding <https://developers.google.com/protocol-buffers/docs/proto3#json>`_.
	RuntimeKey    string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeFeatureFlag) Reset() {
	*x = RuntimeFeatureFlag{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeFeatureFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeFeatureFlag) ProtoMessage() {}

func (x *RuntimeFeatureFlag) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeFeatureFlag.ProtoReflect.Descriptor instead.
func (*RuntimeFeatureFlag) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{8}
}

func (x *RuntimeFeatureFlag) GetDefaultValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RuntimeFeatureFlag) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// Please use :ref:`KeyValuePair <envoy_api_msg_config.core.v3.KeyValuePair>` instead.
// [#not-implemented-hide:]
type KeyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key of the key/value pair.
	//
	// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the key/value pair.
	//
	// The “bytes“ type is used. This means if JSON or YAML is used to to represent the
	// configuration, the value must be base64 encoded. This is unfriendly for users in most
	// use scenarios of this message.
	//
	// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
	Value         []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
func (x *KeyValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KeyValuePair struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key of the key/value pair.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the key/value pair.
	Value         *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{10}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Key/value pair plus option to control append behavior. This is used to specify
// key/value pairs that should be appended to a set of existing key/value pairs.
type KeyValueAppend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The single key/value pair record to be appended or overridden. This field must be set.
	Record *KeyValuePair `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	// Key/value pair entry that this option to append or overwrite. This field is deprecated
	// and please use :ref:`record <envoy_v3_api_field_config.core.v3.KeyValueAppend.record>`
	// as replacement.
	// [#not-implemented-hide:]
	//
	// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
	Entry *KeyValue `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	// Describes the action taken to append/overwrite the given value for an existing
	// key or to only add this key if it's absent.
	Action        KeyValueAppend_KeyValueAppendAction `protobuf:"varint,2,opt,name=action,proto3,enum=envoy.config.core.v3.KeyValueAppend_KeyValueAppendAction" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueAppend) Reset() {
	*x = KeyValueAppend{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueAppend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueAppend) ProtoMessage() {}

func (x *KeyValueAppend) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueAppend.ProtoReflect.Descriptor instead.
func (*KeyValueAppend) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{11}
}

func (x *KeyValueAppend) GetRecord() *KeyValuePair {
	if x != nil {
		return x.Record
	}
	return nil
}

// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
func (x *KeyValueAppend) GetEntry() *KeyValue {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *KeyValueAppend) GetAction() KeyValueAppend_KeyValueAppendAction {
	if x != nil {
		return x.Action
	}
	return KeyValueAppend_APPEND_IF_EXISTS_OR_ADD
}

// Key/value pair to append or remove.
type KeyValueMutation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key/value pair to append or overwrite. Only one of “append“ or “remove“ can be set or
	// the configuration will be rejected.
	Append *KeyValueAppend `protobuf:"bytes,1,opt,name=append,proto3" json:"append,omitempty"`
	// Key to remove. Only one of “append“ or “remove“ can be set or the configuration will be
	// rejected.
	Remove        string `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueMutation) Reset() {
	*x = KeyValueMutation{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueMutation) ProtoMessage() {}

func (x *KeyValueMutation) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueMutation.ProtoReflect.Descriptor instead.
func (*KeyValueMutation) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{12}
}

func (x *KeyValueMutation) GetAppend() *KeyValueAppend {
	if x != nil {
		return x.Append
	}
	return nil
}

func (x *KeyValueMutation) GetRemove() string {
	if x != nil {
		return x.Remove
	}
	return ""
}

// Query parameter name/value pair.
type QueryParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key of the query parameter. Case sensitive.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the query parameter.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryParameter) Reset() {
	*x = QueryParameter{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameter) ProtoMessage() {}

func (x *QueryParameter) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameter.ProtoReflect.Descriptor instead.
func (*QueryParameter) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{13}
}

func (x *QueryParameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Header name/value pair.
type HeaderValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Header value.
	//
	// The same :ref:`format specifier <config_access_log_format>` as used for
	// :ref:`HTTP access logging <config_access_log>` applies here, however
	// unknown header values are replaced with the empty string instead of “-“.
	// Header value is encoded as string. This does not work for non-utf8 characters.
	// Only one of “value“ or “raw_value“ can be set.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Header value is encoded as bytes which can support non-utf8 characters.
	// Only one of “value“ or “raw_value“ can be set.
	RawValue      []byte `protobuf:"bytes,3,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderValue) Reset() {
	*x = HeaderValue{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValue) ProtoMessage() {}

func (x *HeaderValue) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValue.ProtoReflect.Descriptor instead.
func (*HeaderValue) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{14}
}

func (x *HeaderValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HeaderValue) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// Header name/value pair plus option to control append behavior.
type HeaderValueOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header name/value pair that this option applies to.
	Header *HeaderValue `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Should the value be appended? If true (default), the value is appended to
	// existing values. Otherwise it replaces any existing values.
	// This field is deprecated and please use
	// :ref:`append_action <envoy_v3_api_field_config.core.v3.HeaderValueOption.append_action>` as replacement.
	//
	// .. note::
	//
	//	The :ref:`external authorization service <envoy_v3_api_msg_service.auth.v3.CheckResponse>` and
	//	:ref:`external processor service <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>` have
	//	default value (``false``) for this field.
	//
	// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
	Append *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=append,proto3" json:"append,omitempty"`
	// Describes the action taken to append/overwrite the given value for an existing header
	// or to only add this header if it's absent.
	// Value defaults to :ref:`APPEND_IF_EXISTS_OR_ADD
	// <envoy_v3_api_enum_value_config.core.v3.HeaderValueOption.HeaderAppendAction.APPEND_IF_EXISTS_OR_ADD>`.
	AppendAction HeaderValueOption_HeaderAppendAction `protobuf:"varint,3,opt,name=append_action,json=appendAction,proto3,enum=envoy.config.core.v3.HeaderValueOption_HeaderAppendAction" json:"append_action,omitempty"`
	// Is the header value allowed to be empty? If false (default), custom headers with empty values are dropped,
	// otherwise they are added.
	KeepEmptyValue bool `protobuf:"varint,4,opt,name=keep_empty_value,json=keepEmptyValue,proto3" json:"keep_empty_value,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HeaderValueOption) Reset() {
	*x = HeaderValueOption{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValueOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValueOption) ProtoMessage() {}

func (x *HeaderValueOption) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValueOption.ProtoReflect.Descriptor instead.
func (*HeaderValueOption) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{15}
}

func (x *HeaderValueOption) GetHeader() *HeaderValue {
	if x != nil {
		return x.Header
	}
	return nil
}

// Deprecated: Marked as deprecated in envoy/config/core/v3/base.proto.
func (x *HeaderValueOption) GetAppend() *wrapperspb.BoolValue {
	if x != nil {
		return x.Append
	}
	return nil
}

func (x *HeaderValueOption) GetAppendAction() HeaderValueOption_HeaderAppendAction {
	if x != nil {
		return x.AppendAction
	}
	return HeaderValueOption_APPEND_IF_EXISTS_OR_ADD
}

func (x *HeaderValueOption) GetKeepEmptyValue() bool {
	if x != nil {
		return x.KeepEmptyValue
	}
	return false
}

// Wrapper for a set of headers.
type HeaderMap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of header names and their values.
	Headers       []*HeaderValue `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderMap) Reset() {
	*x = HeaderMap{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMap) ProtoMessage() {}

func (x *HeaderMap) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMap.ProtoReflect.Descriptor instead.
func (*HeaderMap) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{16}
}

func (x *HeaderMap) GetHeaders() []*HeaderValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

// A directory that is watched for changes, e.g. by inotify on Linux. Move/rename
// events inside this directory trigger the watch.
type WatchedDirectory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Directory path to watch.
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchedDirectory) Reset() {
	*x = WatchedDirectory{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchedDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchedDirectory) ProtoMessage() {}

func (x *WatchedDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchedDirectory.ProtoReflect.Descriptor instead.
func (*WatchedDirectory) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{17}
}

func (x *WatchedDirectory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Data source consisting of a file, an inline value, or an environment variable.
// [#next-free-field: 6]
type DataSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Specifier:
	//
	//	*DataSource_Filename
	//	*DataSource_InlineBytes
	//	*DataSource_InlineString
	//	*DataSource_EnvironmentVariable
	Specifier isDataSource_Specifier `protobuf_oneof:"specifier"`
	// Watched directory that is watched for file changes. If this is set explicitly, the file
	// specified in the “filename“ field will be reloaded when relevant file move events occur.
	//
	// .. note::
	//
	//	This field only makes sense when the ``filename`` field is set.
	//
	// .. note::
	//
	//	Envoy only updates when the file is replaced by a file move, and not when the file is
	//	edited in place.
	//
	// .. note::
	//
	//	Not all use cases of ``DataSource`` support watching directories. It depends on the
	//	specific usage of the ``DataSource``. See the documentation of the parent message for
	//	details.
	WatchedDirectory *WatchedDirectory `protobuf:"bytes,5,opt,name=watched_directory,json=watchedDirectory,proto3" json:"watched_directory,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{18}
}

func (x *DataSource) GetSpecifier() isDataSource_Specifier {
	if x != nil {
		return x.Specifier
	}
	return nil
}

func (x *DataSource) GetFilename() string {
	if x != nil {
		if x, ok := x.Specifier.(*DataSource_Filename); ok {
			return x.Filename
		}
	}
	return ""
}

func (x *DataSource) GetInlineBytes() []byte {
	if x != nil {
		if x, ok := x.Specifier.(*DataSource_InlineBytes); ok {
			return x.InlineBytes
		}
	}
	return nil
}

func (x *DataSource) GetInlineString() string {
	if x != nil {
		if x, ok := x.Specifier.(*DataSource_InlineString); ok {
			return x.InlineString
		}
	}
	return ""
}

func (x *DataSource) GetEnvironmentVariable() string {
	if x != nil {
		if x, ok := x.Specifier.(*DataSource_EnvironmentVariable); ok {
			return x.EnvironmentVariable
		}
	}
	return ""
}

func (x *DataSource) GetWatchedDirectory() *WatchedDirectory {
	if x != nil {
		return x.WatchedDirectory
	}
	return nil
}

type isDataSource_Specifier interface {
	isDataSource_Specifier()
}

type DataSource_Filename struct {
	// Local filesystem data source.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3,oneof"`
}

type DataSource_InlineBytes struct {
	// Bytes inlined in the configuration.
	InlineBytes []byte `protobuf:"bytes,2,opt,name=inline_bytes,json=inlineBytes,proto3,oneof"`
}

type DataSource_InlineString struct {
	// String inlined in the configuration.
	InlineString string `protobuf:"bytes,3,opt,name=inline_string,json=inlineString,proto3,oneof"`
}

type DataSource_EnvironmentVariable struct {
	// Environment variable data source.
	EnvironmentVariable string `protobuf:"bytes,4,opt,name=environment_variable,json=environmentVariable,proto3,oneof"`
}

func (*DataSource_Filename) isDataSource_Specifier() {}

func (*DataSource_InlineBytes) isDataSource_Specifier() {}

func (*DataSource_InlineString) isDataSource_Specifier() {}

func (*DataSource_EnvironmentVariable) isDataSource_Specifier() {}

// The message specifies the retry policy of remote data source when fetching fails.
// [#next-free-field: 7]
type RetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies parameters that control :ref:`retry backoff strategy <envoy_v3_api_msg_config.core.v3.BackoffStrategy>`.
	// This parameter is optional, in which case the default base interval is 1000 milliseconds. The
	// default maximum interval is 10 times the base interval.
	RetryBackOff *BackoffStrategy `protobuf:"bytes,1,opt,name=retry_back_off,json=retryBackOff,proto3" json:"retry_back_off,omitempty"`
	// Specifies the allowed number of retries. This parameter is optional and
	// defaults to 1.
	NumRetries *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	// For details, see :ref:`retry_on <envoy_v3_api_field_config.route.v3.RetryPolicy.retry_on>`.
	RetryOn string `protobuf:"bytes,3,opt,name=retry_on,json=retryOn,proto3" json:"retry_on,omitempty"`
	// For details, see :ref:`retry_priority <envoy_v3_api_field_config.route.v3.RetryPolicy.retry_priority>`.
	RetryPriority *RetryPolicy_RetryPriority `protobuf:"bytes,4,opt,name=retry_priority,json=retryPriority,proto3" json:"retry_priority,omitempty"`
	// For details, see :ref:`RetryHostPredicate <envoy_v3_api_field_config.route.v3.RetryPolicy.retry_host_predicate>`.
	RetryHostPredicate []*RetryPolicy_RetryHostPredicate `protobuf:"bytes,5,rep,name=retry_host_predicate,json=retryHostPredicate,proto3" json:"retry_host_predicate,omitempty"`
	// For details, see :ref:`host_selection_retry_max_attempts <envoy_v3_api_field_config.route.v3.RetryPolicy.host_selection_retry_max_attempts>`.
	HostSelectionRetryMaxAttempts int64 `protobuf:"varint,6,opt,name=host_selection_retry_max_attempts,json=hostSelectionRetryMaxAttempts,proto3" json:"host_selection_retry_max_attempts,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{19}
}

func (x *RetryPolicy) GetRetryBackOff() *BackoffStrategy {
	if x != nil {
		return x.RetryBackOff
	}
	return nil
}

func (x *RetryPolicy) GetNumRetries() *wrapperspb.UInt32Value {
	if x != nil {
		return x.NumRetries
	}
	return nil
}

func (x *RetryPolicy) GetRetryOn() string {
	if x != nil {
		return x.RetryOn
	}
	return ""
}

func (x *RetryPolicy) GetRetryPriority() *RetryPolicy_RetryPriority {
	if x != nil {
		return x.RetryPriority
	}
	return nil
}

func (x *RetryPolicy) GetRetryHostPredicate() []*RetryPolicy_RetryHostPredicate {
	if x != nil {
		return x.RetryHostPredicate
	}
	return nil
}

func (x *RetryPolicy) GetHostSelectionRetryMaxAttempts() int64 {
	if x != nil {
		return x.HostSelectionRetryMaxAttempts
	}
	return 0
}

// The message specifies how to fetch data from remote and how to verify it.
type RemoteDataSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP URI to fetch the remote data.
	HttpUri *HttpUri `protobuf:"bytes,1,opt,name=http_uri,json=httpUri,proto3" json:"http_uri,omitempty"`
	// SHA256 string for verifying data.
	Sha256 string `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// Retry policy for fetching remote data.
	RetryPolicy   *RetryPolicy `protobuf:"bytes,3,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteDataSource) Reset() {
	*x = RemoteDataSource{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataSource) ProtoMessage() {}

func (x *RemoteDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataSource.ProtoReflect.Descriptor instead.
func (*RemoteDataSource) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{20}
}

func (x *RemoteDataSource) GetHttpUri() *HttpUri {
	if x != nil {
		return x.HttpUri
	}
	return nil
}

func (x *RemoteDataSource) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *RemoteDataSource) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

// Async data source which support async data fetch.
type AsyncDataSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Specifier:
	//
	//	*AsyncDataSource_Local
	//	*AsyncDataSource_Remote
	Specifier     isAsyncDataSource_Specifier `protobuf_oneof:"specifier"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncDataSource) Reset() {
	*x = AsyncDataSource{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncDataSource) ProtoMessage() {}

func (x *AsyncDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncDataSource.ProtoReflect.Descriptor instead.
func (*AsyncDataSource) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{21}
}

func (x *AsyncDataSource) GetSpecifier() isAsyncDataSource_Specifier {
	if x != nil {
		return x.Specifier
	}
	return nil
}

func (x *AsyncDataSource) GetLocal() *DataSource {
	if x != nil {
		if x, ok := x.Specifier.(*AsyncDataSource_Local); ok {
			return x.Local
		}
	}
	return nil
}

func (x *AsyncDataSource) GetRemote() *RemoteDataSource {
	if x != nil {
		if x, ok := x.Specifier.(*AsyncDataSource_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

type isAsyncDataSource_Specifier interface {
	isAsyncDataSource_Specifier()
}

type AsyncDataSource_Local struct {
	// Local async data source.
	Local *DataSource `protobuf:"bytes,1,opt,name=local,proto3,oneof"`
}

type AsyncDataSource_Remote struct {
	// Remote async data source.
	Remote *RemoteDataSource `protobuf:"bytes,2,opt,name=remote,proto3,oneof"`
}

func (*AsyncDataSource_Local) isAsyncDataSource_Specifier() {}

func (*AsyncDataSource_Remote) isAsyncDataSource_Specifier() {}

// Configuration for transport socket in :ref:`listeners <config_listeners>` and
// :ref:`clusters <envoy_v3_api_msg_config.cluster.v3.Cluster>`. If the configuration is
// empty, a default transport socket implementation and configuration will be
// chosen based on the platform and existence of tls_context.
type TransportSocket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the transport socket to instantiate. The name must match a supported transport
	// socket implementation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Implementation specific configuration which depends on the implementation being instantiated.
	// See the supported transport socket implementations for further documentation.
	//
	// Types that are valid to be assigned to ConfigType:
	//
	//	*TransportSocket_TypedConfig
	ConfigType    isTransportSocket_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransportSocket) Reset() {
	*x = TransportSocket{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportSocket) ProtoMessage() {}

func (x *TransportSocket) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportSocket.ProtoReflect.Descriptor instead.
func (*TransportSocket) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{22}
}

func (x *TransportSocket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransportSocket) GetConfigType() isTransportSocket_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *TransportSocket) GetTypedConfig() *anypb.Any {
	if x != nil {
		if x, ok := x.ConfigType.(*TransportSocket_TypedConfig); ok {
			return x.TypedConfig
		}
	}
	return nil
}

type isTransportSocket_ConfigType interface {
	isTransportSocket_ConfigType()
}

type TransportSocket_TypedConfig struct {
	TypedConfig *anypb.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*TransportSocket_TypedConfig) isTransportSocket_ConfigType() {}

// Runtime derived FractionalPercent with defaults for when the numerator or denominator is not
// specified via a runtime key.
//
// .. note::
//
//	Parsing of the runtime key's data is implemented such that it may be represented as a
//	:ref:`FractionalPercent <envoy_v3_api_msg_type.v3.FractionalPercent>` proto represented as JSON/YAML
//	and may also be represented as an integer with the assumption that the value is an integral
//	percentage out of 100. For instance, a runtime key lookup returning the value "42" would parse
//	as a ``FractionalPercent`` whose numerator is 42 and denominator is HUNDRED.
type RuntimeFractionalPercent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Default value if the runtime value's for the numerator/denominator keys are not available.
	DefaultValue *v3.FractionalPercent `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Runtime key for a YAML representation of a FractionalPercent.
	RuntimeKey    string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeFractionalPercent) Reset() {
	*x = RuntimeFractionalPercent{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeFractionalPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeFractionalPercent) ProtoMessage() {}

func (x *RuntimeFractionalPercent) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeFractionalPercent.ProtoReflect.Descriptor instead.
func (*RuntimeFractionalPercent) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{23}
}

func (x *RuntimeFractionalPercent) GetDefaultValue() *v3.FractionalPercent {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RuntimeFractionalPercent) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

// Identifies a specific ControlPlane instance that Envoy is connected to.
type ControlPlane struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An opaque control plane identifier that uniquely identifies an instance
	// of control plane. This can be used to identify which control plane instance,
	// the Envoy is connected to.
	Identifier    string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlPlane) Reset() {
	*x = ControlPlane{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlPlane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlane) ProtoMessage() {}

func (x *ControlPlane) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlane.ProtoReflect.Descriptor instead.
func (*ControlPlane) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{24}
}

func (x *ControlPlane) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// See :ref:`RetryPriority <envoy_v3_api_field_config.route.v3.RetryPolicy.retry_priority>`.
type RetryPolicy_RetryPriority struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to ConfigType:
	//
	//	*RetryPolicy_RetryPriority_TypedConfig
	ConfigType    isRetryPolicy_RetryPriority_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicy_RetryPriority) Reset() {
	*x = RetryPolicy_RetryPriority{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy_RetryPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy_RetryPriority) ProtoMessage() {}

func (x *RetryPolicy_RetryPriority) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy_RetryPriority.ProtoReflect.Descriptor instead.
func (*RetryPolicy_RetryPriority) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RetryPolicy_RetryPriority) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RetryPolicy_RetryPriority) GetConfigType() isRetryPolicy_RetryPriority_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *RetryPolicy_RetryPriority) GetTypedConfig() *anypb.Any {
	if x != nil {
		if x, ok := x.ConfigType.(*RetryPolicy_RetryPriority_TypedConfig); ok {
			return x.TypedConfig
		}
	}
	return nil
}

type isRetryPolicy_RetryPriority_ConfigType interface {
	isRetryPolicy_RetryPriority_ConfigType()
}

type RetryPolicy_RetryPriority_TypedConfig struct {
	TypedConfig *anypb.Any `protobuf:"bytes,2,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*RetryPolicy_RetryPriority_TypedConfig) isRetryPolicy_RetryPriority_ConfigType() {}

// See :ref:`RetryHostPredicate <envoy_v3_api_field_config.route.v3.RetryPolicy.retry_host_predicate>`.
type RetryPolicy_RetryHostPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to ConfigType:
	//
	//	*RetryPolicy_RetryHostPredicate_TypedConfig
	ConfigType    isRetryPolicy_RetryHostPredicate_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicy_RetryHostPredicate) Reset() {
	*x = RetryPolicy_RetryHostPredicate{}
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy_RetryHostPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy_RetryHostPredicate) ProtoMessage() {}

func (x *RetryPolicy_RetryHostPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_base_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy_RetryHostPredicate.ProtoReflect.Descriptor instead.
func (*RetryPolicy_RetryHostPredicate) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_base_proto_rawDescGZIP(), []int{19, 1}
}

func (x *RetryPolicy_RetryHostPredicate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RetryPolicy_RetryHostPredicate) GetConfigType() isRetryPolicy_RetryHostPredicate_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *RetryPolicy_RetryHostPredicate) GetTypedConfig() *anypb.Any {
	if x != nil {
		if x, ok := x.ConfigType.(*RetryPolicy_RetryHostPredicate_TypedConfig); ok {
			return x.TypedConfig
		}
	}
	return nil
}

type isRetryPolicy_RetryHostPredicate_ConfigType interface {
	isRetryPolicy_RetryHostPredicate_ConfigType()
}

type RetryPolicy_RetryHostPredicate_TypedConfig struct {
	TypedConfig *anypb.Any `protobuf:"bytes,2,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*RetryPolicy_RetryHostPredicate_TypedConfig) isRetryPolicy_RetryHostPredicate_ConfigType() {}

var File_envoy_config_core_v3_base_proto protoreflect.FileDescriptor

const file_envoy_config_core_v3_base_proto_rawDesc = "" +
	"\n" +
	"\x1fenvoy/config/core/v3/base.proto\x12\x14envoy.config.core.v3\x1a\"envoy/config/core/v3/address.proto\x1a\"envoy/config/core/v3/backoff.proto\x1a#envoy/config/core/v3/http_uri.proto\x1a\x1benvoy/type/v3/percent.proto\x1a$envoy/type/v3/semantic_version.proto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a xds/core/v3/context_params.proto\x1a#envoy/annotations/deprecation.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"t\n" +
	"\bLocality\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12\x12\n" +
	"\x04zone\x18\x02 \x01(\tR\x04zone\x12\x19\n" +
	"\bsub_zone\x18\x03 \x01(\tR\asubZone:!\x9aň\x1e\x1c\n" +
	"\x1aenvoy.api.v2.core.Locality\"\xa4\x01\n" +
	"\fBuildVersion\x128\n" +
	"\aversion\x18\x01 \x01(\v2\x1e.envoy.type.v3.SemanticVersionR\aversion\x123\n" +
	"\bmetadata\x18\x02 \x01(\v2\x17.google.protobuf.StructR\bmetadata:%\x9aň\x1e \n" +
	"\x1eenvoy.api.v2.core.BuildVersion\"\x8c\x02\n" +
	"\tExtension\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bcategory\x18\x02 \x01(\tR\bcategory\x124\n" +
	"\x0ftype_descriptor\x18\x03 \x01(\tB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x0etypeDescriptor\x12<\n" +
	"\aversion\x18\x04 \x01(\v2\".envoy.config.core.v3.BuildVersionR\aversion\x12\x1a\n" +
	"\bdisabled\x18\x05 \x01(\bR\bdisabled\x12\x1b\n" +
	"\ttype_urls\x18\x06 \x03(\tR\btypeUrls:\"\x9aň\x1e\x1d\n" +
	"\x1benvoy.api.v2.core.Extension\"\xb2\x06\n" +
	"\x04Node\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acluster\x18\x02 \x01(\tR\acluster\x123\n" +
	"\bmetadata\x18\x03 \x01(\v2\x17.google.protobuf.StructR\bmetadata\x12`\n" +
	"\x12dynamic_parameters\x18\f \x03(\v21.envoy.config.core.v3.Node.DynamicParametersEntryR\x11dynamicParameters\x12:\n" +
	"\blocality\x18\x04 \x01(\v2\x1e.envoy.config.core.v3.LocalityR\blocality\x12&\n" +
	"\x0fuser_agent_name\x18\x06 \x01(\tR\ruserAgentName\x12.\n" +
	"\x12user_agent_version\x18\a \x01(\tH\x00R\x10userAgentVersion\x12]\n" +
	"\x18user_agent_build_version\x18\b \x01(\v2\".envoy.config.core.v3.BuildVersionH\x00R\x15userAgentBuildVersion\x12?\n" +
	"\n" +
	"extensions\x18\t \x03(\v2\x1f.envoy.config.core.v3.ExtensionR\n" +
	"extensions\x12'\n" +
	"\x0fclient_features\x18\n" +
	" \x03(\tR\x0eclientFeatures\x12[\n" +
	"\x13listening_addresses\x18\v \x03(\v2\x1d.envoy.config.core.v3.AddressB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x12listeningAddresses\x1a`\n" +
	"\x16DynamicParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.xds.core.v3.ContextParamsR\x05value:\x028\x01:\x1d\x9aň\x1e\x18\n" +
	"\x16envoy.api.v2.core.NodeB\x19\n" +
	"\x17user_agent_version_typeJ\x04\b\x05\x10\x06R\rbuild_version\"\xcd\x03\n" +
	"\bMetadata\x12i\n" +
	"\x0ffilter_metadata\x18\x01 \x03(\v22.envoy.config.core.v3.Metadata.FilterMetadataEntryB\f\xfaB\t\x9a\x01\x06\"\x04r\x02\x10\x01R\x0efilterMetadata\x12y\n" +
	"\x15typed_filter_metadata\x18\x02 \x03(\v27.envoy.config.core.v3.Metadata.TypedFilterMetadataEntryB\f\xfaB\t\x9a\x01\x06\"\x04r\x02\x10\x01R\x13typedFilterMetadata\x1aZ\n" +
	"\x13FilterMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1a\\\n" +
	"\x18TypedFilterMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01:!\x9aň\x1e\x1c\n" +
	"\x1aenvoy.api.v2.core.Metadata\"\x86\x01\n" +
	"\rRuntimeUInt32\x12#\n" +
	"\rdefault_value\x18\x02 \x01(\rR\fdefaultValue\x12(\n" +
	"\vruntime_key\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"runtimeKey:&\x9aň\x1e!\n" +
	"\x1fenvoy.api.v2.core.RuntimeUInt32\"w\n" +
	"\x0eRuntimePercent\x12;\n" +
	"\rdefault_value\x18\x01 \x01(\v2\x16.envoy.type.v3.PercentR\fdefaultValue\x12(\n" +
	"\vruntime_key\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"runtimeKey\"\x86\x01\n" +
	"\rRuntimeDouble\x12#\n" +
	"\rdefault_value\x18\x01 \x01(\x01R\fdefaultValue\x12(\n" +
	"\vruntime_key\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"runtimeKey:&\x9aň\x1e!\n" +
	"\x1fenvoy.api.v2.core.RuntimeDouble\"\xb6\x01\n" +
	"\x12RuntimeFeatureFlag\x12I\n" +
	"\rdefault_value\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueB\b\xfaB\x05\x8a\x01\x02\x10\x01R\fdefaultValue\x12(\n" +
	"\vruntime_key\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"runtimeKey:+\x9aň\x1e&\n" +
	"$envoy.api.v2.core.RuntimeFeatureFlag\"W\n" +
	"\bKeyValue\x12(\n" +
	"\x03key\x18\x01 \x01(\tB\x16\xfaB\br\x06\x10\x01(\x80\x80\x01\x92ǆ\xd8\x04\x033.0\x18\x01R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\fB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x05value\"[\n" +
	"\fKeyValuePair\x12\x1d\n" +
	"\x03key\x18\x01 \x01(\tB\v\xfaB\br\x06\x10\x01(\x80\x80\x01R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value\"\xf5\x02\n" +
	"\x0eKeyValueAppend\x12:\n" +
	"\x06record\x18\x03 \x01(\v2\".envoy.config.core.v3.KeyValuePairR\x06record\x12I\n" +
	"\x05entry\x18\x01 \x01(\v2\x1e.envoy.config.core.v3.KeyValueB\x13\xfaB\x05\x8a\x01\x02\b\x01\x92ǆ\xd8\x04\x033.0\x18\x01R\x05entry\x12[\n" +
	"\x06action\x18\x02 \x01(\x0e29.envoy.config.core.v3.KeyValueAppend.KeyValueAppendActionB\b\xfaB\x05\x82\x01\x02\x10\x01R\x06action\"\x7f\n" +
	"\x14KeyValueAppendAction\x12\x1b\n" +
	"\x17APPEND_IF_EXISTS_OR_ADD\x10\x00\x12\x11\n" +
	"\rADD_IF_ABSENT\x10\x01\x12\x1e\n" +
	"\x1aOVERWRITE_IF_EXISTS_OR_ADD\x10\x02\x12\x17\n" +
	"\x13OVERWRITE_IF_EXISTS\x10\x03\"s\n" +
	"\x10KeyValueMutation\x12<\n" +
	"\x06append\x18\x01 \x01(\v2$.envoy.config.core.v3.KeyValueAppendR\x06append\x12!\n" +
	"\x06remove\x18\x02 \x01(\tB\t\xfaB\x06r\x04(\x80\x80\x01R\x06remove\"A\n" +
	"\x0eQueryParameter\x12\x19\n" +
	"\x03key\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xcd\x01\n" +
	"\vHeaderValue\x12#\n" +
	"\x03key\x18\x01 \x01(\tB\x11\xfaB\x0er\f\x10\x01(\x80\x80\x01\xc8\x01\x00\xc0\x01\x01R\x03key\x127\n" +
	"\x05value\x18\x02 \x01(\tB!\xfaB\fr\n" +
	"(\x80\x80\x01\xc8\x01\x00\xc0\x01\x02\xf2\x98\xfe\x8f\x05\f\x12\n" +
	"value_typeR\x05value\x12:\n" +
	"\traw_value\x18\x03 \x01(\fB\x1d\xfaB\bz\x06\x10\x00\x18\x80\x80\x01\xf2\x98\xfe\x8f\x05\f\x12\n" +
	"value_typeR\brawValue:$\x9aň\x1e\x1f\n" +
	"\x1denvoy.api.v2.core.HeaderValue\"\xd9\x03\n" +
	"\x11HeaderValueOption\x12C\n" +
	"\x06header\x18\x01 \x01(\v2!.envoy.config.core.v3.HeaderValueB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06header\x12?\n" +
	"\x06append\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x06append\x12i\n" +
	"\rappend_action\x18\x03 \x01(\x0e2:.envoy.config.core.v3.HeaderValueOption.HeaderAppendActionB\b\xfaB\x05\x82\x01\x02\x10\x01R\fappendAction\x12(\n" +
	"\x10keep_empty_value\x18\x04 \x01(\bR\x0ekeepEmptyValue\"}\n" +
	"\x12HeaderAppendAction\x12\x1b\n" +
	"\x17APPEND_IF_EXISTS_OR_ADD\x10\x00\x12\x11\n" +
	"\rADD_IF_ABSENT\x10\x01\x12\x1e\n" +
	"\x1aOVERWRITE_IF_EXISTS_OR_ADD\x10\x02\x12\x17\n" +
	"\x13OVERWRITE_IF_EXISTS\x10\x03:*\x9aň\x1e%\n" +
	"#envoy.api.v2.core.HeaderValueOption\"l\n" +
	"\tHeaderMap\x12;\n" +
	"\aheaders\x18\x01 \x03(\v2!.envoy.config.core.v3.HeaderValueR\aheaders:\"\x9aň\x1e\x1d\n" +
	"\x1benvoy.api.v2.core.HeaderMap\"/\n" +
	"\x10WatchedDirectory\x12\x1b\n" +
	"\x04path\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04path\"\xc9\x02\n" +
	"\n" +
	"DataSource\x12%\n" +
	"\bfilename\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01H\x00R\bfilename\x12#\n" +
	"\finline_bytes\x18\x02 \x01(\fH\x00R\vinlineBytes\x12%\n" +
	"\rinline_string\x18\x03 \x01(\tH\x00R\finlineString\x12<\n" +
	"\x14environment_variable\x18\x04 \x01(\tB\a\xfaB\x04r\x02\x10\x01H\x00R\x13environmentVariable\x12S\n" +
	"\x11watched_directory\x18\x05 \x01(\v2&.envoy.config.core.v3.WatchedDirectoryR\x10watchedDirectory:#\x9aň\x1e\x1e\n" +
	"\x1cenvoy.api.v2.core.DataSourceB\x10\n" +
	"\tspecifier\x12\x03\xf8B\x01\"\xee\x05\n" +
	"\vRetryPolicy\x12K\n" +
	"\x0eretry_back_off\x18\x01 \x01(\v2%.envoy.config.core.v3.BackoffStrategyR\fretryBackOff\x12R\n" +
	"\vnum_retries\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueB\x13\xf2\x98\xfe\x8f\x05\r\n" +
	"\vmax_retriesR\n" +
	"numRetries\x12\x19\n" +
	"\bretry_on\x18\x03 \x01(\tR\aretryOn\x12V\n" +
	"\x0eretry_priority\x18\x04 \x01(\v2/.envoy.config.core.v3.RetryPolicy.RetryPriorityR\rretryPriority\x12f\n" +
	"\x14retry_host_predicate\x18\x05 \x03(\v24.envoy.config.core.v3.RetryPolicy.RetryHostPredicateR\x12retryHostPredicate\x12H\n" +
	"!host_selection_retry_max_attempts\x18\x06 \x01(\x03R\x1dhostSelectionRetryMaxAttempts\x1av\n" +
	"\rRetryPriority\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x129\n" +
	"\ftyped_config\x18\x02 \x01(\v2\x14.google.protobuf.AnyH\x00R\vtypedConfigB\r\n" +
	"\vconfig_type\x1a{\n" +
	"\x12RetryHostPredicate\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x129\n" +
	"\ftyped_config\x18\x02 \x01(\v2\x14.google.protobuf.AnyH\x00R\vtypedConfigB\r\n" +
	"\vconfig_type:$\x9aň\x1e\x1f\n" +
	"\x1denvoy.api.v2.core.RetryPolicy\"\xe8\x01\n" +
	"\x10RemoteDataSource\x12B\n" +
	"\bhttp_uri\x18\x01 \x01(\v2\x1d.envoy.config.core.v3.HttpUriB\b\xfaB\x05\x8a\x01\x02\x10\x01R\ahttpUri\x12\x1f\n" +
	"\x06sha256\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06sha256\x12D\n" +
	"\fretry_policy\x18\x03 \x01(\v2!.envoy.config.core.v3.RetryPolicyR\vretryPolicy:)\x9aň\x1e$\n" +
	"\"envoy.api.v2.core.RemoteDataSource\"\xc9\x01\n" +
	"\x0fAsyncDataSource\x128\n" +
	"\x05local\x18\x01 \x01(\v2 .envoy.config.core.v3.DataSourceH\x00R\x05local\x12@\n" +
	"\x06remote\x18\x02 \x01(\v2&.envoy.config.core.v3.RemoteDataSourceH\x00R\x06remote:(\x9aň\x1e#\n" +
	"!envoy.api.v2.core.AsyncDataSourceB\x10\n" +
	"\tspecifier\x12\x03\xf8B\x01\"\xb0\x01\n" +
	"\x0fTransportSocket\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x129\n" +
	"\ftyped_config\x18\x03 \x01(\v2\x14.google.protobuf.AnyH\x00R\vtypedConfig:(\x9aň\x1e#\n" +
	"!envoy.api.v2.core.TransportSocketB\r\n" +
	"\vconfig_typeJ\x04\b\x02\x10\x03R\x06config\"\xbf\x01\n" +
	"\x18RuntimeFractionalPercent\x12O\n" +
	"\rdefault_value\x18\x01 \x01(\v2 .envoy.type.v3.FractionalPercentB\b\xfaB\x05\x8a\x01\x02\x10\x01R\fdefaultValue\x12\x1f\n" +
	"\vruntime_key\x18\x02 \x01(\tR\n" +
	"runtimeKey:1\x9aň\x1e,\n" +
	"*envoy.api.v2.core.RuntimeFractionalPercent\"U\n" +
	"\fControlPlane\x12\x1e\n" +
	"\n" +
	"identifier\x18\x01 \x01(\tR\n" +
	"identifier:%\x9aň\x1e \n" +
	"\x1eenvoy.api.v2.core.ControlPlane*(\n" +
	"\x0fRoutingPriority\x12\v\n" +
	"\aDEFAULT\x10\x00\x12\b\n" +
	"\x04HIGH\x10\x01*\x89\x01\n" +
	"\rRequestMethod\x12\x16\n" +
	"\x12METHOD_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03GET\x10\x01\x12\b\n" +
	"\x04HEAD\x10\x02\x12\b\n" +
	"\x04POST\x10\x03\x12\a\n" +
	"\x03PUT\x10\x04\x12\n" +
	"\n" +
	"\x06DELETE\x10\x05\x12\v\n" +
	"\aCONNECT\x10\x06\x12\v\n" +
	"\aOPTIONS\x10\a\x12\t\n" +
	"\x05TRACE\x10\b\x12\t\n" +
	"\x05PATCH\x10\t*>\n" +
	"\x10TrafficDirection\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\v\n" +
	"\aINBOUND\x10\x01\x12\f\n" +
	"\bOUTBOUND\x10\x02B}\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"\"io.envoyproxy.envoy.config.core.v3B\tBaseProtoP\x01ZBgithub.com/envoyproxy/go-control-plane/envoy/config/core/v3;corev3b\x06proto3"

var (
	file_envoy_config_core_v3_base_proto_rawDescOnce sync.Once
	file_envoy_config_core_v3_base_proto_rawDescData []byte
)

func file_envoy_config_core_v3_base_proto_rawDescGZIP() []byte {
	file_envoy_config_core_v3_base_proto_rawDescOnce.Do(func() {
		file_envoy_config_core_v3_base_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_core_v3_base_proto_rawDesc), len(file_envoy_config_core_v3_base_proto_rawDesc)))
	})
	return file_envoy_config_core_v3_base_proto_rawDescData
}

var file_envoy_config_core_v3_base_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_envoy_config_core_v3_base_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_envoy_config_core_v3_base_proto_goTypes = []any{
	(RoutingPriority)(0),                      // 0: envoy.config.core.v3.RoutingPriority
	(RequestMethod)(0),                        // 1: envoy.config.core.v3.RequestMethod
	(TrafficDirection)(0),                     // 2: envoy.config.core.v3.TrafficDirection
	(KeyValueAppend_KeyValueAppendAction)(0),  // 3: envoy.config.core.v3.KeyValueAppend.KeyValueAppendAction
	(HeaderValueOption_HeaderAppendAction)(0), // 4: envoy.config.core.v3.HeaderValueOption.HeaderAppendAction
	(*Locality)(nil),                          // 5: envoy.config.core.v3.Locality
	(*BuildVersion)(nil),                      // 6: envoy.config.core.v3.BuildVersion
	(*Extension)(nil),                         // 7: envoy.config.core.v3.Extension
	(*Node)(nil),                              // 8: envoy.config.core.v3.Node
	(*Metadata)(nil),                          // 9: envoy.config.core.v3.Metadata
	(*RuntimeUInt32)(nil),                     // 10: envoy.config.core.v3.RuntimeUInt32
	(*RuntimePercent)(nil),                    // 11: envoy.config.core.v3.RuntimePercent
	(*RuntimeDouble)(nil),                     // 12: envoy.config.core.v3.RuntimeDouble
	(*RuntimeFeatureFlag)(nil),                // 13: envoy.config.core.v3.RuntimeFeatureFlag
	(*KeyValue)(nil),                          // 14: envoy.config.core.v3.KeyValue
	(*KeyValuePair)(nil),                      // 15: envoy.config.core.v3.KeyValuePair
	(*KeyValueAppend)(nil),                    // 16: envoy.config.core.v3.KeyValueAppend
	(*KeyValueMutation)(nil),                  // 17: envoy.config.core.v3.KeyValueMutation
	(*QueryParameter)(nil),                    // 18: envoy.config.core.v3.QueryParameter
	(*HeaderValue)(nil),                       // 19: envoy.config.core.v3.HeaderValue
	(*HeaderValueOption)(nil),                 // 20: envoy.config.core.v3.HeaderValueOption
	(*HeaderMap)(nil),                         // 21: envoy.config.core.v3.HeaderMap
	(*WatchedDirectory)(nil),                  // 22: envoy.config.core.v3.WatchedDirectory
	(*DataSource)(nil),                        // 23: envoy.config.core.v3.DataSource
	(*RetryPolicy)(nil),                       // 24: envoy.config.core.v3.RetryPolicy
	(*RemoteDataSource)(nil),                  // 25: envoy.config.core.v3.RemoteDataSource
	(*AsyncDataSource)(nil),                   // 26: envoy.config.core.v3.AsyncDataSource
	(*TransportSocket)(nil),                   // 27: envoy.config.core.v3.TransportSocket
	(*RuntimeFractionalPercent)(nil),          // 28: envoy.config.core.v3.RuntimeFractionalPercent
	(*ControlPlane)(nil),                      // 29: envoy.config.core.v3.ControlPlane
	nil,                                       // 30: envoy.config.core.v3.Node.DynamicParametersEntry
	nil,                                       // 31: envoy.config.core.v3.Metadata.FilterMetadataEntry
	nil,                                       // 32: envoy.config.core.v3.Metadata.TypedFilterMetadataEntry
	(*RetryPolicy_RetryPriority)(nil),         // 33: envoy.config.core.v3.RetryPolicy.RetryPriority
	(*RetryPolicy_RetryHostPredicate)(nil),    // 34: envoy.config.core.v3.RetryPolicy.RetryHostPredicate
	(*v3.SemanticVersion)(nil),                // 35: envoy.type.v3.SemanticVersion
	(*structpb.Struct)(nil),                   // 36: google.protobuf.Struct
	(*Address)(nil),                           // 37: envoy.config.core.v3.Address
	(*v3.Percent)(nil),                        // 38: envoy.type.v3.Percent
	(*wrapperspb.BoolValue)(nil),              // 39: google.protobuf.BoolValue
	(*structpb.Value)(nil),                    // 40: google.protobuf.Value
	(*BackoffStrategy)(nil),                   // 41: envoy.config.core.v3.BackoffStrategy
	(*wrapperspb.UInt32Value)(nil),            // 42: google.protobuf.UInt32Value
	(*HttpUri)(nil),                           // 43: envoy.config.core.v3.HttpUri
	(*anypb.Any)(nil),                         // 44: google.protobuf.Any
	(*v3.FractionalPercent)(nil),              // 45: envoy.type.v3.FractionalPercent
	(*v31.ContextParams)(nil),                 // 46: xds.core.v3.ContextParams
}
var file_envoy_config_core_v3_base_proto_depIdxs = []int32{
	35, // 0: envoy.config.core.v3.BuildVersion.version:type_name -> envoy.type.v3.SemanticVersion
	36, // 1: envoy.config.core.v3.BuildVersion.metadata:type_name -> google.protobuf.Struct
	6,  // 2: envoy.config.core.v3.Extension.version:type_name -> envoy.config.core.v3.BuildVersion
	36, // 3: envoy.config.core.v3.Node.metadata:type_name -> google.protobuf.Struct
	30, // 4: envoy.config.core.v3.Node.dynamic_parameters:type_name -> envoy.config.core.v3.Node.DynamicParametersEntry
	5,  // 5: envoy.config.core.v3.Node.locality:type_name -> envoy.config.core.v3.Locality
	6,  // 6: envoy.config.core.v3.Node.user_agent_build_version:type_name -> envoy.config.core.v3.BuildVersion
	7,  // 7: envoy.config.core.v3.Node.extensions:type_name -> envoy.config.core.v3.Extension
	37, // 8: envoy.config.core.v3.Node.listening_addresses:type_name -> envoy.config.core.v3.Address
	31, // 9: envoy.config.core.v3.Metadata.filter_metadata:type_name -> envoy.config.core.v3.Metadata.FilterMetadataEntry
	32, // 10: envoy.config.core.v3.Metadata.typed_filter_metadata:type_name -> envoy.config.core.v3.Metadata.TypedFilterMetadataEntry
	38, // 11: envoy.config.core.v3.RuntimePercent.default_value:type_name -> envoy.type.v3.Percent
	39, // 12: envoy.config.core.v3.RuntimeFeatureFlag.default_value:type_name -> google.protobuf.BoolValue
	40, // 13: envoy.config.core.v3.KeyValuePair.value:type_name -> google.protobuf.Value
	15, // 14: envoy.config.core.v3.KeyValueAppend.record:type_name -> envoy.config.core.v3.KeyValuePair
	14, // 15: envoy.config.core.v3.KeyValueAppend.entry:type_name -> envoy.config.core.v3.KeyValue
	3,  // 16: envoy.config.core.v3.KeyValueAppend.action:type_name -> envoy.config.core.v3.KeyValueAppend.KeyValueAppendAction
	16, // 17: envoy.config.core.v3.KeyValueMutation.append:type_name -> envoy.config.core.v3.KeyValueAppend
	19, // 18: envoy.config.core.v3.HeaderValueOption.header:type_name -> envoy.config.core.v3.HeaderValue
	39, // 19: envoy.config.core.v3.HeaderValueOption.append:type_name -> google.protobuf.BoolValue
	4,  // 20: envoy.config.core.v3.HeaderValueOption.append_action:type_name -> envoy.config.core.v3.HeaderValueOption.HeaderAppendAction
	19, // 21: envoy.config.core.v3.HeaderMap.headers:type_name -> envoy.config.core.v3.HeaderValue
	22, // 22: envoy.config.core.v3.DataSource.watched_directory:type_name -> envoy.config.core.v3.WatchedDirectory
	41, // 23: envoy.config.core.v3.RetryPolicy.retry_back_off:type_name -> envoy.config.core.v3.BackoffStrategy
	42, // 24: envoy.config.core.v3.RetryPolicy.num_retries:type_name -> google.protobuf.UInt32Value
	33, // 25: envoy.config.core.v3.RetryPolicy.retry_priority:type_name -> envoy.config.core.v3.RetryPolicy.RetryPriority
	34, // 26: envoy.config.core.v3.RetryPolicy.retry_host_predicate:type_name -> envoy.config.core.v3.RetryPolicy.RetryHostPredicate
	43, // 27: envoy.config.core.v3.RemoteDataSource.http_uri:type_name -> envoy.config.core.v3.HttpUri
	24, // 28: envoy.config.core.v3.RemoteDataSource.retry_policy:type_name -> envoy.config.core.v3.RetryPolicy
	23, // 29: envoy.config.core.v3.AsyncDataSource.local:type_name -> envoy.config.core.v3.DataSource
	25, // 30: envoy.config.core.v3.AsyncDataSource.remote:type_name -> envoy.config.core.v3.RemoteDataSource
	44, // 31: envoy.config.core.v3.TransportSocket.typed_config:type_name -> google.protobuf.Any
	45, // 32: envoy.config.core.v3.RuntimeFractionalPercent.default_value:type_name -> envoy.type.v3.FractionalPercent
	46, // 33: envoy.config.core.v3.Node.DynamicParametersEntry.value:type_name -> xds.core.v3.ContextParams
	36, // 34: envoy.config.core.v3.Metadata.FilterMetadataEntry.value:type_name -> google.protobuf.Struct
	44, // 35: envoy.config.core.v3.Metadata.TypedFilterMetadataEntry.value:type_name -> google.protobuf.Any
	44, // 36: envoy.config.core.v3.RetryPolicy.RetryPriority.typed_config:type_name -> google.protobuf.Any
	44, // 37: envoy.config.core.v3.RetryPolicy.RetryHostPredicate.typed_config:type_name -> google.protobuf.Any
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_envoy_config_core_v3_base_proto_init() }
func file_envoy_config_core_v3_base_proto_init() {
	if File_envoy_config_core_v3_base_proto != nil {
		return
	}
	file_envoy_config_core_v3_address_proto_init()
	file_envoy_config_core_v3_backoff_proto_init()
	file_envoy_config_core_v3_http_uri_proto_init()
	file_envoy_config_core_v3_base_proto_msgTypes[3].OneofWrappers = []any{
		(*Node_UserAgentVersion)(nil),
		(*Node_UserAgentBuildVersion)(nil),
	}
	file_envoy_config_core_v3_base_proto_msgTypes[18].OneofWrappers = []any{
		(*DataSource_Filename)(nil),
		(*DataSource_InlineBytes)(nil),
		(*DataSource_InlineString)(nil),
		(*DataSource_EnvironmentVariable)(nil),
	}
	file_envoy_config_core_v3_base_proto_msgTypes[21].OneofWrappers = []any{
		(*AsyncDataSource_Local)(nil),
		(*AsyncDataSource_Remote)(nil),
	}
	file_envoy_config_core_v3_base_proto_msgTypes[22].OneofWrappers = []any{
		(*TransportSocket_TypedConfig)(nil),
	}
	file_envoy_config_core_v3_base_proto_msgTypes[28].OneofWrappers = []any{
		(*RetryPolicy_RetryPriority_TypedConfig)(nil),
	}
	file_envoy_config_core_v3_base_proto_msgTypes[29].OneofWrappers = []any{
		(*RetryPolicy_RetryHostPredicate_TypedConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_core_v3_base_proto_rawDesc), len(file_envoy_config_core_v3_base_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_core_v3_base_proto_goTypes,
		DependencyIndexes: file_envoy_config_core_v3_base_proto_depIdxs,
		EnumInfos:         file_envoy_config_core_v3_base_proto_enumTypes,
		MessageInfos:      file_envoy_config_core_v3_base_proto_msgTypes,
	}.Build()
	File_envoy_config_core_v3_base_proto = out.File
	file_envoy_config_core_v3_base_proto_goTypes = nil
	file_envoy_config_core_v3_base_proto_depIdxs = nil
}
