# --- START OF FILE services/security-service/WORKSPACE ---
# --- AUTOGENERATED WORKSPACE FILE ---

# --- Bazel requires this load statement ---
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# --- Bazel Rulesets ---

# rules_proto: Rules for building protocol buffers
# Version determined from Envoy v1.31.1 blueprint
http_archive(
    name = "rules_proto",
    sha256 = "dc3fb206a85a973a9183e65f19189810636779a0739a3f32d30683a711054b0a",
    strip_prefix = "rules_proto-5.3.0-21.7",
    urls = ["https://github.com/bazelbuild/rules_proto/archive/refs/tags/5.3.0-21.7.tar.gz"],
)

# rules_proto_grpc: Rules for building gRPC code from protos
# Version determined from Envoy v1.31.1 blueprint
http_archive(
    name = "rules_proto_grpc",
    sha256 = "2a0860a38faa4f6c191577060020c41c929d1b84787b1991a57188d69bbfd9ea",
    strip_prefix = "rules_proto_grpc-4.6.0",
    urls = ["https://github.com/rules-proto-grpc/rules_proto_grpc/releases/download/4.6.0/rules_proto_grpc-4.6.0.tar.gz"],
)

# --- Core C++ Libraries ---

# Protobuf Runtime and Compiler
# Version determined from Envoy v1.31.1 blueprint
# Note: Envoy often uses specific commits, but here we use the release tag matching the version.
# The build system within protobuf will handle pulling its own dependencies (like Abseil if needed by its build).
http_archive(
    name = "com_google_protobuf",
    sha256 = "4fc5ff1b1c19bdaff9929dd243389c303fb7e5bce3987716a1601722fea34677",
    strip_prefix = "protobuf-26.1",
    urls = ["https://github.com/protocolbuffers/protobuf/releases/download/v26.1/protobuf-26.1.tar.gz"],
)

# Abseil C++ Common Libraries (Dependency for gRPC, Protobuf, etc.)
# Version determined from Envoy v1.31.1 blueprint
# Note: The specific commit hash used by Envoy is often mapped to a release tag. 20230802.1 is a tagged release.
http_archive(
    name = "com_google_absl",
    sha256 = "987ce98f02eef9f6f098470c0615979501caca01f095122e52717690d6450b3a",
    strip_prefix = "abseil-cpp-20230802.1",
    urls = ["https://github.com/abseil/abseil-cpp/archive/20230802.1.tar.gz"],
)

# gRPC C++ Core and Code Generation Plugin
# Version determined from Envoy v1.31.1 blueprint
http_archive(
    name = "com_github_grpc_grpc",
    sha256 = "c9f9ae6e1c3ed3687027a595d1e974c8480f515937b685970693a00cf8f085f3",
    strip_prefix = "grpc-1.62.1",
    urls = ["https://github.com/grpc/grpc/archive/v1.62.1.tar.gz"],
)

# --- Load necessary dependencies for gRPC ---
# gRPC's own build system (defined within its downloaded archive, typically in grpc_deps.bzl)
# needs to be loaded so Bazel knows about its transitive dependencies (like Abseil, Protobuf etc.)
# The path @com_github_grpc_grpc//bazel:grpc_deps.bzl becomes valid *after* the http_archive above.
load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")

# Execute the grpc_deps function to load gRPC's dependencies.
# It internally calls http_archive, etc., for things gRPC needs.
grpc_deps()

# --- Load necessary dependencies for Protobuf ---
# Similarly, load Protobuf's dependencies.
# The specific file might vary slightly between versions, but `protobuf_deps.bzl` is common.
load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

# Execute the protobuf_deps function.
protobuf_deps()


# --- Load dependencies for rules_proto_grpc ---
# These rules might also have their own transitive dependencies.
# Check the documentation/repository for the specific version if needed.
# Example (check rules_proto_grpc docs/repo for actual file/function if issues arise):
# load("@rules_proto_grpc//:repositories.bzl", rules_proto_grpc_repos = "repositories")
# rules_proto_grpc_repos()
# For v4.6.0, it seems simpler and dependencies might be handled via its usage of rules_proto and toolchains. Let's omit explicit repo loading for now unless needed.

# --- END OF FILE services/security-service/WORKSPACE ---
