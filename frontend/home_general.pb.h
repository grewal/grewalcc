// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_general.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_home_5fgeneral_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_home_5fgeneral_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_home_5fgeneral_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_home_5fgeneral_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_home_5fgeneral_2eproto;
namespace grewal {
class HomeGeneralRequest;
struct HomeGeneralRequestDefaultTypeInternal;
extern HomeGeneralRequestDefaultTypeInternal _HomeGeneralRequest_default_instance_;
class HomeGeneralResponse;
struct HomeGeneralResponseDefaultTypeInternal;
extern HomeGeneralResponseDefaultTypeInternal _HomeGeneralResponse_default_instance_;
}  // namespace grewal
PROTOBUF_NAMESPACE_OPEN
template<> ::grewal::HomeGeneralRequest* Arena::CreateMaybeMessage<::grewal::HomeGeneralRequest>(Arena*);
template<> ::grewal::HomeGeneralResponse* Arena::CreateMaybeMessage<::grewal::HomeGeneralResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grewal {

// ===================================================================

class HomeGeneralRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grewal.HomeGeneralRequest) */ {
 public:
  inline HomeGeneralRequest() : HomeGeneralRequest(nullptr) {}
  ~HomeGeneralRequest() override;
  explicit PROTOBUF_CONSTEXPR HomeGeneralRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HomeGeneralRequest(const HomeGeneralRequest& from);
  HomeGeneralRequest(HomeGeneralRequest&& from) noexcept
    : HomeGeneralRequest() {
    *this = ::std::move(from);
  }

  inline HomeGeneralRequest& operator=(const HomeGeneralRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomeGeneralRequest& operator=(HomeGeneralRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HomeGeneralRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HomeGeneralRequest* internal_default_instance() {
    return reinterpret_cast<const HomeGeneralRequest*>(
               &_HomeGeneralRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HomeGeneralRequest& a, HomeGeneralRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HomeGeneralRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomeGeneralRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HomeGeneralRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HomeGeneralRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HomeGeneralRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HomeGeneralRequest& from) {
    HomeGeneralRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomeGeneralRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grewal.HomeGeneralRequest";
  }
  protected:
  explicit HomeGeneralRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpHostFieldNumber = 1,
    kRemoteIpFieldNumber = 2,
    kUserAgentFieldNumber = 3,
  };
  // string http_host = 1;
  void clear_http_host();
  const std::string& http_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_host();
  PROTOBUF_NODISCARD std::string* release_http_host();
  void set_allocated_http_host(std::string* http_host);
  private:
  const std::string& _internal_http_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_host(const std::string& value);
  std::string* _internal_mutable_http_host();
  public:

  // string remote_ip = 2;
  void clear_remote_ip();
  const std::string& remote_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_ip();
  PROTOBUF_NODISCARD std::string* release_remote_ip();
  void set_allocated_remote_ip(std::string* remote_ip);
  private:
  const std::string& _internal_remote_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_ip(const std::string& value);
  std::string* _internal_mutable_remote_ip();
  public:

  // string user_agent = 3;
  void clear_user_agent();
  const std::string& user_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_agent();
  PROTOBUF_NODISCARD std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // @@protoc_insertion_point(class_scope:grewal.HomeGeneralRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_home_5fgeneral_2eproto;
};
// -------------------------------------------------------------------

class HomeGeneralResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grewal.HomeGeneralResponse) */ {
 public:
  inline HomeGeneralResponse() : HomeGeneralResponse(nullptr) {}
  ~HomeGeneralResponse() override;
  explicit PROTOBUF_CONSTEXPR HomeGeneralResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HomeGeneralResponse(const HomeGeneralResponse& from);
  HomeGeneralResponse(HomeGeneralResponse&& from) noexcept
    : HomeGeneralResponse() {
    *this = ::std::move(from);
  }

  inline HomeGeneralResponse& operator=(const HomeGeneralResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomeGeneralResponse& operator=(HomeGeneralResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HomeGeneralResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HomeGeneralResponse* internal_default_instance() {
    return reinterpret_cast<const HomeGeneralResponse*>(
               &_HomeGeneralResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HomeGeneralResponse& a, HomeGeneralResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HomeGeneralResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomeGeneralResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HomeGeneralResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HomeGeneralResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HomeGeneralResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HomeGeneralResponse& from) {
    HomeGeneralResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomeGeneralResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grewal.HomeGeneralResponse";
  }
  protected:
  explicit HomeGeneralResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHtmlOutputFieldNumber = 1,
  };
  // string html_output = 1;
  void clear_html_output();
  const std::string& html_output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_html_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_html_output();
  PROTOBUF_NODISCARD std::string* release_html_output();
  void set_allocated_html_output(std::string* html_output);
  private:
  const std::string& _internal_html_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_html_output(const std::string& value);
  std::string* _internal_mutable_html_output();
  public:

  // @@protoc_insertion_point(class_scope:grewal.HomeGeneralResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_output_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_home_5fgeneral_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HomeGeneralRequest

// string http_host = 1;
inline void HomeGeneralRequest::clear_http_host() {
  _impl_.http_host_.ClearToEmpty();
}
inline const std::string& HomeGeneralRequest::http_host() const {
  // @@protoc_insertion_point(field_get:grewal.HomeGeneralRequest.http_host)
  return _internal_http_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HomeGeneralRequest::set_http_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.http_host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grewal.HomeGeneralRequest.http_host)
}
inline std::string* HomeGeneralRequest::mutable_http_host() {
  std::string* _s = _internal_mutable_http_host();
  // @@protoc_insertion_point(field_mutable:grewal.HomeGeneralRequest.http_host)
  return _s;
}
inline const std::string& HomeGeneralRequest::_internal_http_host() const {
  return _impl_.http_host_.Get();
}
inline void HomeGeneralRequest::_internal_set_http_host(const std::string& value) {
  
  _impl_.http_host_.Set(value, GetArenaForAllocation());
}
inline std::string* HomeGeneralRequest::_internal_mutable_http_host() {
  
  return _impl_.http_host_.Mutable(GetArenaForAllocation());
}
inline std::string* HomeGeneralRequest::release_http_host() {
  // @@protoc_insertion_point(field_release:grewal.HomeGeneralRequest.http_host)
  return _impl_.http_host_.Release();
}
inline void HomeGeneralRequest::set_allocated_http_host(std::string* http_host) {
  if (http_host != nullptr) {
    
  } else {
    
  }
  _impl_.http_host_.SetAllocated(http_host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.http_host_.IsDefault()) {
    _impl_.http_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grewal.HomeGeneralRequest.http_host)
}

// string remote_ip = 2;
inline void HomeGeneralRequest::clear_remote_ip() {
  _impl_.remote_ip_.ClearToEmpty();
}
inline const std::string& HomeGeneralRequest::remote_ip() const {
  // @@protoc_insertion_point(field_get:grewal.HomeGeneralRequest.remote_ip)
  return _internal_remote_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HomeGeneralRequest::set_remote_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remote_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grewal.HomeGeneralRequest.remote_ip)
}
inline std::string* HomeGeneralRequest::mutable_remote_ip() {
  std::string* _s = _internal_mutable_remote_ip();
  // @@protoc_insertion_point(field_mutable:grewal.HomeGeneralRequest.remote_ip)
  return _s;
}
inline const std::string& HomeGeneralRequest::_internal_remote_ip() const {
  return _impl_.remote_ip_.Get();
}
inline void HomeGeneralRequest::_internal_set_remote_ip(const std::string& value) {
  
  _impl_.remote_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* HomeGeneralRequest::_internal_mutable_remote_ip() {
  
  return _impl_.remote_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* HomeGeneralRequest::release_remote_ip() {
  // @@protoc_insertion_point(field_release:grewal.HomeGeneralRequest.remote_ip)
  return _impl_.remote_ip_.Release();
}
inline void HomeGeneralRequest::set_allocated_remote_ip(std::string* remote_ip) {
  if (remote_ip != nullptr) {
    
  } else {
    
  }
  _impl_.remote_ip_.SetAllocated(remote_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remote_ip_.IsDefault()) {
    _impl_.remote_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grewal.HomeGeneralRequest.remote_ip)
}

// string user_agent = 3;
inline void HomeGeneralRequest::clear_user_agent() {
  _impl_.user_agent_.ClearToEmpty();
}
inline const std::string& HomeGeneralRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:grewal.HomeGeneralRequest.user_agent)
  return _internal_user_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HomeGeneralRequest::set_user_agent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_agent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grewal.HomeGeneralRequest.user_agent)
}
inline std::string* HomeGeneralRequest::mutable_user_agent() {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:grewal.HomeGeneralRequest.user_agent)
  return _s;
}
inline const std::string& HomeGeneralRequest::_internal_user_agent() const {
  return _impl_.user_agent_.Get();
}
inline void HomeGeneralRequest::_internal_set_user_agent(const std::string& value) {
  
  _impl_.user_agent_.Set(value, GetArenaForAllocation());
}
inline std::string* HomeGeneralRequest::_internal_mutable_user_agent() {
  
  return _impl_.user_agent_.Mutable(GetArenaForAllocation());
}
inline std::string* HomeGeneralRequest::release_user_agent() {
  // @@protoc_insertion_point(field_release:grewal.HomeGeneralRequest.user_agent)
  return _impl_.user_agent_.Release();
}
inline void HomeGeneralRequest::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    
  } else {
    
  }
  _impl_.user_agent_.SetAllocated(user_agent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_agent_.IsDefault()) {
    _impl_.user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grewal.HomeGeneralRequest.user_agent)
}

// -------------------------------------------------------------------

// HomeGeneralResponse

// string html_output = 1;
inline void HomeGeneralResponse::clear_html_output() {
  _impl_.html_output_.ClearToEmpty();
}
inline const std::string& HomeGeneralResponse::html_output() const {
  // @@protoc_insertion_point(field_get:grewal.HomeGeneralResponse.html_output)
  return _internal_html_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HomeGeneralResponse::set_html_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.html_output_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grewal.HomeGeneralResponse.html_output)
}
inline std::string* HomeGeneralResponse::mutable_html_output() {
  std::string* _s = _internal_mutable_html_output();
  // @@protoc_insertion_point(field_mutable:grewal.HomeGeneralResponse.html_output)
  return _s;
}
inline const std::string& HomeGeneralResponse::_internal_html_output() const {
  return _impl_.html_output_.Get();
}
inline void HomeGeneralResponse::_internal_set_html_output(const std::string& value) {
  
  _impl_.html_output_.Set(value, GetArenaForAllocation());
}
inline std::string* HomeGeneralResponse::_internal_mutable_html_output() {
  
  return _impl_.html_output_.Mutable(GetArenaForAllocation());
}
inline std::string* HomeGeneralResponse::release_html_output() {
  // @@protoc_insertion_point(field_release:grewal.HomeGeneralResponse.html_output)
  return _impl_.html_output_.Release();
}
inline void HomeGeneralResponse::set_allocated_html_output(std::string* html_output) {
  if (html_output != nullptr) {
    
  } else {
    
  }
  _impl_.html_output_.SetAllocated(html_output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.html_output_.IsDefault()) {
    _impl_.html_output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grewal.HomeGeneralResponse.html_output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grewal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_home_5fgeneral_2eproto
