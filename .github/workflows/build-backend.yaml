# .github/workflows/build-backend.yaml
# Workflow name displayed on GitHub Actions tab
name: Build and Deploy Backend via Docker Hub

# Triggers for the workflow
on:
  # Run on pushes to the master branch...
  push:
    branches: [ "master" ]
    # ...but only if files in these paths changed
    paths:
      - 'frontend/**'
      - 'db/**'
      - 'security/**'
      - 'templates/**'
      - 'docker/Dockerfile'
      - '.github/workflows/build-backend.yaml'
  # Also run on pull requests targeting the master branch...
  pull_request:
    branches: [ "master" ]
    # ...if files in these paths changed (useful for testing changes before merge)
    paths:
      - 'frontend/**'
      - 'db/**'
      - 'security/**'
      - 'templates/**'
      - 'docker/Dockerfile'
      - '.github/workflows/build-backend.yaml'

# Environment variables available to all jobs in this workflow
env:
  # Define the target Docker Hub repository name
  # Used in 'build-image' for tagging and 'deploy' for pulling
  DOCKER_IMAGE_NAME: grewal/grewal

# Defines the jobs that make up the workflow
jobs:
  # First job: Build the image and push it to Docker Hub
  build-image:
    # Name displayed for this job in the GitHub Actions UI
    name: Build and Push Docker Image to Docker Hub
    # Specifies the type of runner machine to use
    runs-on: ubuntu-latest

    # Sequence of steps executed within the 'build-image' job
    steps:
      # Step 1: Check out the repository code onto the runner
      - name: Checkout code
        uses: actions/checkout@v4 # Uses a standard GitHub Action for checking out code

      # Step 2: Set up Docker Buildx, an enhanced builder backend for Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Enables features like multi-platform builds and better caching

      # Step 3: Log in to Docker Hub using stored secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Uses a standard Docker Action for login
        with:
          # Your Docker Hub username from GitHub Secrets
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # Your Docker Hub access token from GitHub Secrets (used as password)
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build the Docker image and push it to Docker Hub
      - name: Build and push Docker image
        id: docker_build # Assign an ID to this step (optional, useful for outputs)
        uses: docker/build-push-action@v5 # Uses a standard Docker Action for build & push
        with:
          # Specifies the build context (directory containing Dockerfile and source)
          context: .
          # Specifies the path to the Dockerfile
          file: ./docker/Dockerfile
          # Tells the action to push the image to the registry after building
          push: true
          # Tags the image with 'latest' and the specific commit SHA
          # Uses the DOCKER_IMAGE_NAME defined in 'env'
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          # Enables caching using GitHub Actions cache to speed up subsequent builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Second job: Deploy the image to the VM by pulling from Docker Hub
  deploy:
    # Name displayed for this job in the GitHub Actions UI
    name: Pull Image and Restart Service on VM
    # Specifies that this job depends on 'build-image' finishing successfully
    needs: build-image
    # Specifies the type of runner machine to use (can be different from build job)
    runs-on: ubuntu-latest
    # Condition: Only run this job if the event was a push to the 'master' branch
    # Prevents deploying pull request builds automatically
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    # Sequence of steps executed within the 'deploy' job
    steps:
      # Step 1: Set up SSH Agent to handle the private key securely
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0 # Action to load SSH key for authentication
        with:
          # The private SSH key (stored as a GitHub Secret) needed to access the VM
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 2: Add the VM's host key to the runner's known_hosts file
      # Prevents interactive prompts about host authenticity during SSH connection
      - name: Add Known Hosts
        run: |
          mkdir -p ~/.ssh # Ensure the .ssh directory exists
          # Scan for the host key of the deployment server and append it
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          # Set correct permissions for the known_hosts file
          chmod 600 ~/.ssh/known_hosts

      # Step 3: SSH into the VM and execute deployment commands
      - name: Pull image and restart service on VM
        uses: appleboy/ssh-action@v1.0.3 # Action to execute commands remotely via SSH
        with:
          # The hostname or IP address of the deployment VM (from GitHub Secrets)
          host: ${{ secrets.DEPLOY_HOST }}
          # The username to log in as on the VM (from GitHub Secrets)
          username: ${{ secrets.DEPLOY_USER }}
          # The private SSH key (already loaded by ssh-agent, but some actions need it explicitly)
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # The multi-line script to execute on the remote VM
          script: |
            set -e # Configure the script to exit immediately if any command fails
            # Define the full Docker image name to pull (using env var)
            IMAGE_TO_PULL="${{ env.DOCKER_IMAGE_NAME }}:latest"

            # Log the target server for information
            echo "Deployment target: ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
            # Log the action being performed
            echo "Pulling latest Docker image: ${IMAGE_TO_PULL}..."
            # Execute 'docker pull' on the VM to download the specified image from Docker Hub
            docker pull "${IMAGE_TO_PULL}"

            # Log the next action
            echo "Restarting grewal-backend service (using the newly pulled image)..."
            # Use sudo to restart the systemd service that runs the Docker container
            # The service definition should use 'grewal/grewal:latest'
            sudo /usr/bin/systemctl restart grewal-backend.service

            # Log the waiting action
            echo "Waiting briefly for service to settle..."
            # Pause for a few seconds to allow the container to potentially start up
            sleep 5

            # Log the status check action
            echo "Checking service status..."
            # Check the status of the systemd service. '--no-pager' prevents interactive mode.
            # '|| true' ensures the workflow step doesn't fail if the service status check itself errors briefly after restart
            sudo /usr/bin/systemctl status grewal-backend.service --no-pager || true

            # Optional: Command to display recent logs from the running container (commented out)
            # echo "Displaying recent container logs..."
            # docker logs --tail 50 grewal-backend || true

            # Log completion of the script
            echo "Deployment script finished."

