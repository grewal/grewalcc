name: Build, Test, and Deploy C++ Backend

# Trigger this workflow on pushes to ANY branch
on:
  push:

jobs:
  # --- JOB 1: Build and Test (Runs on ALL pushes) ---
  build:
    name: Build and Test grewal binary
    runs-on: ubuntu-latest # Use a standard GitHub-hosted runner
    steps:
      # 1. Get the code from the repository
      - name: Check out repository code
        uses: actions/checkout@v4

      # 2. Install all needed build/test tools and libraries
      #    UPDATED LIST for static linking requirements (comments removed)
      - name: Install Dependencies # <<< CHECKPOINT 1
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            make \
            gcc \
            g++ \
            pkg-config \
            libgrpc-dev \
            libprotobuf-dev \
            protobuf-compiler-grpc \
            libre2-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            libctemplate-dev \
            libssl-dev \
            zlib1g-dev \
            libabsl-dev \
            libgtest-dev # <<< Ensure all these packages exist on ubuntu-latest and provide static libs (.a)

      # 3. Compile the C++ backend code using static linking Makefile
      - name: Build Backend # <<< CHECKPOINT 2
        # Assumes your Makefile is in 'frontend/' and correctly configured for static linking
        run: make -C frontend

      # 4. Run the C++ tests
      - name: Run Tests # <<< CHECKPOINT 3
        # Assumes your 'test' target works with static linking setup
        run: make -C frontend test

      # 5. Verify the binary exists and check its linkage
      - name: List build output and check linkage # <<< CHECKPOINT 4
        run: |
          ls -lh frontend/grewal
          echo "--- Running ldd on the built binary (in CI) ---"
          ldd frontend/grewal || true # <<< Critical check for successful static linking

      # 6. Upload the compiled (hopefully static) binary so the 'deploy' job can use it
      - name: Upload grewal artifact # <<< CHECKPOINT 5
        uses: actions/upload-artifact@v4
        with:
          name: grewal-binary
          path: frontend/grewal # Path must be correct

  # --- JOB 2: Deploy to VM (Runs ONLY on 'master' pushes AFTER 'build' succeeds) ---
  deploy:
    name: Deploy grewal binary to VM
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      # 1. Download the binary artifact from the 'build' job
      - name: Download grewal artifact # <<< CHECKPOINT 6
        uses: actions/download-artifact@v4
        with:
          name: grewal-binary # Must match upload name

      # 2. Make the downloaded binary executable (on the runner)
      - name: Set execute permissions on binary
        run: chmod +x ./grewal

      # 3. Copy the binary file to the target VM using SCP
      - name: Copy binary to VM via SCP # <<< CHECKPOINT 7
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./grewal"
          target: "/home/monty/" # Destination dir exists and user has write perm

      # 4. Execute commands on the target VM using SSH
      - name: Execute deployment commands on VM via SSH # <<< CHECKPOINT 8
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # These commands run ON your VM (gcc-gem-a)
            echo "Connection established to ${{ secrets.SSH_HOST }} as ${{ secrets.SSH_USER }}"
            echo "Executing deployment script..."
            ls -l /home/monty/grewal
            sudo systemctl stop grewal.service # Assumes passwordless sudo for this user/command
            sudo cp /home/monty/grewal /usr/local/bin/grewal # Assumes passwordless sudo for this user/command AND target dir exists
            sudo systemctl start grewal.service # Assumes passwordless sudo for this user/command
            rm /home/monty/grewal # Assumes user has permission to remove the file
            echo "Deployment script on VM completed."
