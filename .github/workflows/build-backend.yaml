# .github/workflows/build-backend.yaml
name: Build, Test, and Deploy C++ Backend

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test grewal binary
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Base Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            cmake \
            libgrpc++-dev \
            libprotobuf-dev \
            protobuf-compiler \
            protobuf-compiler-grpc \
            libre2-dev \
            libgflags-dev \
            libctemplate-dev \
            libgoogle-glog-dev \
            libabsl-dev \
            libssl-dev \
            zlib1g-dev \
            liblzma-dev \
            libunwind-dev \
            libgtest-dev \
            wget # Ensure wget is installed

      - name: Build c-ares from source
        run: |
          # Use the correct version identified (1.34.4)
          export CARES_VERSION="1.34.4"
          export CARES_INSTALL_PREFIX="$GITHUB_WORKSPACE/cares_install"
          mkdir -p "$CARES_INSTALL_PREFIX"
          echo "Installing c-ares version ${CARES_VERSION} to $CARES_INSTALL_PREFIX"

          # --- USE WGET/TAR WITH CORRECT VERSION AND URL ---
          echo "Downloading c-ares source tarball (v${CARES_VERSION})..."
          wget -q -O "c-ares-${CARES_VERSION}.tar.gz" "https://github.com/c-ares/c-ares/releases/download/v${CARES_VERSION}/c-ares-${CARES_VERSION}.tar.gz"
          if [ ! -f "c-ares-${CARES_VERSION}.tar.gz" ]; then
             echo "ERROR: Failed to download c-ares tarball!"
             exit 1
          fi
          echo "Extracting c-ares source..."
          mkdir cares_src
          tar xzf "c-ares-${CARES_VERSION}.tar.gz" -C cares_src --strip-components=1
          cd cares_src
          # --- END WGET/TAR SECTION ---

          echo "Configuring c-ares with CMake..."
          cmake . \
            -DCMAKE_INSTALL_PREFIX="$CARES_INSTALL_PREFIX" \
            -DCARES_STATIC=ON \
            -DCARES_SHARED=OFF
          echo "Building c-ares..."
          make -j$(nproc)
          echo "Installing c-ares..."
          make install

          # --- ADDED DIAGNOSTICS START ---
          echo "--- Checking installed c-ares files (Detailed) ---"
          echo "Listing contents of $CARES_INSTALL_PREFIX:"
          ls -lR "$CARES_INSTALL_PREFIX"
          echo "--- Specifically checking for libcares.a ---"
          find "$CARES_INSTALL_PREFIX" -name "libcares.a"
          echo "--- Specifically checking for c-ares.pc ---"
          find "$CARES_INSTALL_PREFIX" -name "c-ares.pc"
          echo "--- Listing contents of expected pkgconfig dir ---"
          ls -l "$CARES_INSTALL_PREFIX/lib/pkgconfig/" || echo "pkgconfig directory not found or empty"
          echo "--- Trying to cat c-ares.pc (if it exists) ---"
          cat "$CARES_INSTALL_PREFIX/lib/pkgconfig/c-ares.pc" || echo "c-ares.pc not found"
          # --- ADDED DIAGNOSTICS END ---

          # Go back to the parent directory before the next step
          cd ..

      - name: Build Backend Binary
        env:
          # Point pkg-config to the custom c-ares install location
          PKG_CONFIG_PATH: ${{ github.workspace }}/cares_install/lib/pkgconfig
        run: |
          echo "--- Using PKG_CONFIG_PATH=$PKG_CONFIG_PATH ---"
          # Verify c-ares is found via pkg-config now
          pkg-config --exists --print-errors c-ares || (echo "ERROR: Still cannot find c-ares via pkg-config" && exit 1)
          echo "--- c-ares static libs via pkg-config: ---"
          pkg-config --static --libs c-ares
          echo "--- Proceeding with make (verbose) ---"
          # Use V=1 for verbose make output to see the exact commands
          make -C frontend V=1

      - name: Run Tests
        env:
          # Pass the PKG_CONFIG_PATH to the test execution as well, in case tests link separately
          PKG_CONFIG_PATH: ${{ github.workspace }}/cares_install/lib/pkgconfig
          # LD_LIBRARY_PATH might not be strictly needed for static test binary, but include defensively
          LD_LIBRARY_PATH: ${{ github.workspace }}/cares_install/lib
        run: |
          echo "--- Running tests with PKG_CONFIG_PATH=$PKG_CONFIG_PATH ---"
          # Assuming 'make test' correctly builds/runs tests
          make -C frontend test

      - name: Check Binary Linkage and Size
        run: |
          echo "--- Checking grewal binary ---"
          if [ -f frontend/grewal ]; then
            ls -lh frontend/grewal
            # ldd should show 'not a dynamic executable' or minimal dependencies for static build
            ldd frontend/grewal
          else
            echo "grewal binary not found (build likely failed)"
            # Fail the step explicitly if binary is missing after make
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grewal-binary
          path: frontend/grewal # Ensure this path matches where make puts the binary
          if-no-files-found: warn

  deploy:
    name: Deploy grewal binary to VM
    needs: build # Ensures this only runs if 'build' job succeeds
    runs-on: ubuntu-latest
    # Condition: Only run on push to master branch, not PRs
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: grewal-binary

      - name: Set Execute Permissions
        run: chmod +x grewal

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy binary to VM
        # Use corrected scp command from previous fix
        run: scp -o StrictHostKeyChecking=no grewal ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/grewal_new_deploy

      - name: Execute deployment script on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Stopping grewal service..."
            sudo /usr/bin/systemctl stop grewal.service
            echo "Copying new binary..."
            sudo /usr/bin/cp /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy /usr/local/bin/grewal
            echo "Setting permissions on new binary..."
            sudo chmod +x /usr/local/bin/grewal
            echo "Starting grewal service..."
            sudo /usr/bin/systemctl start grewal.service
            echo "Removing temporary file..."
            rm /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy
            echo "Checking service status..."
            sudo /usr/bin/systemctl status grewal.service --no-pager || true
          EOF
