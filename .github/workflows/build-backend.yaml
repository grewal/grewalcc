name: Build, Test, and Deploy C++ Backend

# Trigger this workflow on pushes to ANY branch
on:
  push:

jobs:
  # --- JOB 1: Build and Test (Runs on ALL pushes) ---
  build:
    name: Build and Test grewal binary
    runs-on: ubuntu-latest # Use a standard GitHub-hosted runner
    steps:
      # 1. Get the code from the repository
      - name: Check out repository code
        uses: actions/checkout@v4

      # 2. Install all needed build/test tools and libraries
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends make g++ libprotobuf-dev protobuf-compiler libgrpc++-dev libgrpc-dev libabsl-dev libre2-dev libctemplate-dev libgflags-dev libgtest-dev

      # 3. Compile the C++ backend code
      - name: Build Backend
        # Assumes your Makefile is in 'frontend/' and output is 'frontend/grewal'
        run: make -C frontend

      # 4. Run the C++ tests
      - name: Run Tests
        # Assumes your 'test' target is in the 'frontend/' Makefile
        run: make -C frontend test

      # 5. (Optional) Verify the binary exists
      - name: List build output
        run: ls -l frontend/grewal

      # 6. Upload the compiled binary so the 'deploy' job can use it
      - name: Upload grewal artifact
        uses: actions/upload-artifact@v4
        with:
          name: grewal-binary # This name must match the download step in the 'deploy' job
          path: frontend/grewal # Path to the built binary relative to the repo root

  # --- JOB 2: Deploy to VM (Runs ONLY on 'master' pushes AFTER 'build' succeeds) ---
  deploy:
    name: Deploy grewal binary to VM
    needs: build # Depends on the 'build' job finishing successfully
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' # Only run deploy job for master branch

    steps:
      # 1. Download the binary artifact from the 'build' job
      - name: Download grewal artifact
        uses: actions/download-artifact@v4
        with:
          name: grewal-binary # Must match the upload name

      # 2. Make the downloaded binary executable (on the runner)
      - name: Set execute permissions on binary
        run: chmod +x ./grewal

      # 3. Copy the binary file to the target VM using SCP
      - name: Copy binary to VM via SCP
        uses: appleboy/scp-action@master # Use dedicated SCP action
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # Standard SSH port
          source: "./grewal" # The executable file in the runner's workspace
          target: "/home/monty/" # The destination directory on the VM

      # 4. Execute commands on the target VM using SSH
      - name: Execute deployment commands on VM via SSH
        uses: appleboy/ssh-action@master # Use SSH action (no source/target here)
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # This is the UPDATED script block
          script: |
            # These commands run ON your VM (gcc-gem-a)
            echo "Connection established to ${{ secrets.SSH_HOST }} as ${{ secrets.SSH_USER }}"
            echo "Executing deployment script..."

            # Verify the file arrived (optional debug)
            echo "Listing files in /home/monty/..."
            ls -l /home/monty/grewal

            # --- Deployment Steps ---
            echo "Stopping grewal service..."
            # *** REQUIRES passwordless sudo ***
            sudo systemctl stop grewal.service

            echo "Copying new binary to /usr/local/bin/..."
            # *** REQUIRES passwordless sudo ***
            sudo cp /home/monty/grewal /usr/local/bin/grewal

            echo "Starting grewal service..."
            # *** REQUIRES passwordless sudo ***
            sudo systemctl start grewal.service

            # Clean up the temporarily copied file
            echo "Cleaning up temporary file /home/monty/grewal..."
            rm /home/monty/grewal

            echo "Deployment script on VM completed." # Note: This indicates the script finished, not necessarily that all sudo commands succeeded.
