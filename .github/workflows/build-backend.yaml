# .github/workflows/build-backend.yaml
name: Build, Test, and Deploy C++ Backend

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test grewal binary
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Base Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            cmake \
            libgrpc++-dev \
            libprotobuf-dev \
            protobuf-compiler \
            protobuf-compiler-grpc \
            libre2-dev \
            libgflags-dev \
            libctemplate-dev \
            libgoogle-glog-dev \
            libabsl-dev \
            libssl-dev \
            zlib1g-dev \
            liblzma-dev \
            libunwind-dev \
            libgtest-dev

      - name: Build c-ares from source
        run: |
          export CARES_INSTALL_PREFIX="$GITHUB_WORKSPACE/cares_install"
          mkdir -p "$CARES_INSTALL_PREFIX"
          echo "Installing c-ares to $CARES_INSTALL_PREFIX"
          # --- MODIFIED SECTION START ---
          # Clone the repository shallowly (default branch)
          echo "Cloning c-ares repository..."
          git clone --depth 1 https://github.com/c-ares/c-ares.git cares_src
          cd cares_src
          # Explicitly checkout the desired tag
          echo "Checking out tag cares-1_32_3..."
          git checkout cares-1_32_3
          # --- MODIFIED SECTION END ---
          echo "Configuring c-ares with CMake..."
          cmake . \
            -DCMAKE_INSTALL_PREFIX="$CARES_INSTALL_PREFIX" \
            -DCARES_STATIC=ON \
            -DCARES_SHARED=OFF
          echo "Building c-ares..."
          make -j$(nproc)
          echo "Installing c-ares..."
          make install
          echo "--- Checking installed c-ares files ---"
          find "$CARES_INSTALL_PREFIX" -name "libcares.a"
          find "$CARES_INSTALL_PREFIX" -name "c-ares.pc"
          # Go back to the parent directory before the next step
          cd ..

      - name: Build Backend Binary
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/cares_install/lib/pkgconfig
        run: |
          echo "--- Using PKG_CONFIG_PATH=$PKG_CONFIG_PATH ---"
          pkg-config --exists --print-errors c-ares || (echo "ERROR: Still cannot find c-ares via pkg-config" && exit 1)
          echo "--- c-ares static libs via pkg-config: ---"
          pkg-config --static --libs c-ares
          echo "--- Proceeding with make (verbose) ---"
          make -C frontend V=1

      - name: Run Tests
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/cares_install/lib/pkgconfig
          LD_LIBRARY_PATH: ${{ github.workspace }}/cares_install/lib
        run: |
          echo "--- Running tests with PKG_CONFIG_PATH=$PKG_CONFIG_PATH ---"
          make -C frontend test

      - name: Check Binary Linkage and Size
        run: |
          echo "--- Checking grewal binary ---"
          if [ -f frontend/grewal ]; then
            ls -lh frontend/grewal
            ldd frontend/grewal
          else
            echo "grewal binary not found (build likely failed)"
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grewal-binary
          path: frontend/grewal
          if-no-files-found: warn

  deploy:
    name: Deploy grewal binary to VM
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: grewal-binary

      - name: Set Execute Permissions
        run: chmod +x grewal

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy binary to VM
        run: >
          scp -o StrictHostKeyChecking=no \
          grewal \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/grewal_new_deploy

      - name: Execute deployment script on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Stopping grewal service..."
            sudo /usr/bin/systemctl stop grewal.service
            echo "Copying new binary..."
            sudo /usr/bin/cp /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy /usr/local/bin/grewal
            echo "Setting permissions on new binary..."
            sudo chmod +x /usr/local/bin/grewal
            echo "Starting grewal service..."
            sudo /usr/bin/systemctl start grewal.service
            echo "Removing temporary file..."
            rm /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy
            echo "Checking service status..."
            sudo /usr/bin/systemctl status grewal.service --no-pager || true
          EOF
