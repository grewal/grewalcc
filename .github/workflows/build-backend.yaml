# .github/workflows/build-backend.yaml
name: Build Docker Image and Deploy via SCP

on:
  push:
    branches: [ "master" ]
    paths:
      - 'frontend/**'
      - 'db/**'
      - 'security/**'
      - 'templates/**'
      - 'docker/Dockerfile'
      - '.github/workflows/build-backend.yaml'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'frontend/**'
      - 'db/**'
      - 'security/**'
      - 'templates/**'
      - 'docker/Dockerfile'
      - '.github/workflows/build-backend.yaml'

env:
  # Define the image name used during the build and save steps
  # This is internal to the build process now, not for a registry
  IMAGE_NAME: grewal-backend
  # Define the name for the saved tarball archive
  IMAGE_ARCHIVE_NAME: grewal-backend-image.tar

jobs:
  build-image: # Renamed job for clarity
    name: Build Docker Image and Save Archive
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # Still useful for build features even if not pushing
        uses: docker/setup-buildx-action@v3

      # REMOVED: Docker Login step (not needed)

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          # IMPORTANT: Set push: false as we are not pushing to a registry
          push: false
          # Tag locally so 'docker save' can find it
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Cache still helps speed up the build step itself
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Ensure image is loaded into the local docker engine for 'docker save'
          load: true

      - name: Save Docker image to tarball
        run: |
          echo "Saving image ${{ env.IMAGE_NAME }}:latest to ${{ env.IMAGE_ARCHIVE_NAME }}"
          docker save -o ${{ env.IMAGE_ARCHIVE_NAME }} ${{ env.IMAGE_NAME }}:latest
          echo "Tarball created:"
          ls -lh ${{ env.IMAGE_ARCHIVE_NAME }}

      - name: Upload image archive artifact
        # Upload the tarball so the deploy job can access it
        uses: actions/upload-artifact@v4
        with:
          name: grewal-image-archive # Artifact name
          path: ${{ env.IMAGE_ARCHIVE_NAME }} # Path to the file to upload
          if-no-files-found: error # Fail if the tarball wasn't created

  deploy:
    name: Deploy Docker Image Archive via SCP
    needs: build-image # Run after the image archive is built and saved
    runs-on: ubuntu-latest
    # Condition: Only run on push to master branch, not PRs
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Download image archive artifact
        uses: actions/download-artifact@v4
        with:
          name: grewal-image-archive # Match artifact name from build job
          # Artifact will be downloaded into the current directory

      - name: Verify downloaded archive
        run: |
          echo "Checking downloaded archive:"
          ls -lh ${{ env.IMAGE_ARCHIVE_NAME }}

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Test TCP Connection to VM Port 22
        run: |
          echo "Attempting TCP connection to ${{ secrets.DEPLOY_HOST }}:22..."
          # Use nc with a 5-second timeout (-w5) and verbose output (-v)
          # The -z flag tells nc to scan for listening daemons without sending data
          nc -w 5 -zv ${{ secrets.DEPLOY_HOST }} 22
          echo "TCP connection test finished."

      - name: Copy image archive to VM via SCP
        # Using appleboy/scp-action for potentially simpler syntax
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # Default SSH port
          source: ${{ env.IMAGE_ARCHIVE_NAME }} # The downloaded artifact file
          # Target path on the VM (e.g., user's home directory)
          target: "~/"
          strip_components: 0 # Keep the original filename

      - name: Load image and restart service on VM
        # Using appleboy/ssh-action to run multiple commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command fails
            VM_ARCHIVE_PATH="/home/${{ secrets.DEPLOY_USER }}/${{ env.IMAGE_ARCHIVE_NAME }}"
            echo "Deployment target: ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
            echo "Loading Docker image from ${VM_ARCHIVE_PATH}..."
            # Load the image from the transferred tarball
            docker load -i "${VM_ARCHIVE_PATH}"

            echo "Restarting grewal-backend service (using the newly loaded image)..."
            # Restart the systemd service which should use the ':latest' tag
            sudo /usr/bin/systemctl restart grewal-backend.service

            echo "Removing transferred archive: ${VM_ARCHIVE_PATH}..."
            # Clean up the tarball from the VM
            rm "${VM_ARCHIVE_PATH}"

            echo "Waiting briefly for service to settle..."
            sleep 5

            echo "Checking service status..."
            sudo /usr/bin/systemctl status grewal-backend.service --no-pager || true

            # Optional: Display logs from the container after restart
            # echo "Displaying recent container logs..."
            # docker logs --tail 50 grewal-backend || true # Assumes container name is 'grewal-backend'

            echo "Deployment script finished."
