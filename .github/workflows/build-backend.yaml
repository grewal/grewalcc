# .github/workflows/build-backend.yaml
name: Build, Test, and Deploy C++ Backend

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and Test grewal binary
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Base Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            cmake \
            libgrpc++-dev \
            libprotobuf-dev \
            protobuf-compiler \
            protobuf-compiler-grpc \
            libre2-dev \
            libgflags-dev \
            libctemplate-dev \
            libgoogle-glog-dev \
            libabsl-dev \
            libssl-dev \
            zlib1g-dev \
            liblzma-dev \
            libunwind-dev \
            libgtest-dev \
            wget # Ensure wget is installed

      # STEP 1: Build c-ares and add DETAILED verification
      - name: Build c-ares from source with Verification
        run: |
          export CARES_VERSION="1.34.4"
          export CARES_INSTALL_PREFIX="$GITHUB_WORKSPACE/cares_install"
          mkdir -p "$CARES_INSTALL_PREFIX"
          echo "Installing c-ares version ${CARES_VERSION} to $CARES_INSTALL_PREFIX"

          echo "Downloading c-ares source tarball (v${CARES_VERSION})..."
          wget -q -O "c-ares-${CARES_VERSION}.tar.gz" "https://github.com/c-ares/c-ares/releases/download/v${CARES_VERSION}/c-ares-${CARES_VERSION}.tar.gz"
          if [ ! -f "c-ares-${CARES_VERSION}.tar.gz" ]; then
             echo "ERROR: Failed to download c-ares tarball!"
             exit 1
          fi

          echo "Extracting c-ares source..."
          mkdir cares_src
          tar xzf "c-ares-${CARES_VERSION}.tar.gz" -C cares_src --strip-components=1
          cd cares_src

          echo "Configuring c-ares with CMake..."
          cmake . \
            -DCMAKE_INSTALL_PREFIX="$CARES_INSTALL_PREFIX" \
            -DCARES_STATIC=ON \
            -DCARES_SHARED=OFF
          echo "Building c-ares..."
          make -j$(nproc)
          echo "Installing c-ares..."
          make install # This is where files get put into $CARES_INSTALL_PREFIX

          # --- Start Added Verification ---
          echo "--- Checking installed c-ares files ---"
          echo "Searching for libcares.a:"
          find "$CARES_INSTALL_PREFIX" -name "libcares.a" -exec ls -l {} \; || echo "libcares.a NOT FOUND!"

          echo "Searching for c-ares.pc and showing details:"
          find "$CARES_INSTALL_PREFIX" -name "c-ares.pc" -exec ls -l {} \; -exec echo "--- Content of c-ares.pc (if found): ---" \; -exec cat {} \; || echo "c-ares.pc NOT FOUND!"

          echo "--- Listing contents of expected install directories ---"
          echo "Listing $CARES_INSTALL_PREFIX/lib:"
          ls -l "$CARES_INSTALL_PREFIX/lib" || echo "Directory $CARES_INSTALL_PREFIX/lib not found or empty."
          echo "Listing $CARES_INSTALL_PREFIX/lib/pkgconfig:"
          ls -l "$CARES_INSTALL_PREFIX/lib/pkgconfig" || echo "Directory $CARES_INSTALL_PREFIX/lib/pkgconfig not found or empty."
          echo "Listing $CARES_INSTALL_PREFIX/share/pkgconfig:"
          ls -l "$CARES_INSTALL_PREFIX/share/pkgconfig" || echo "Directory $CARES_INSTALL_PREFIX/share/pkgconfig not found or empty."
          # --- End Added Verification ---

          cd .. # Go back to workspace root

      # STEP 2: Build Backend Binary with pkg-config debugging
      - name: Build Backend Binary with Debugging
        # IMPORTANT: Set PKG_CONFIG_PATH to the location where c-ares.pc *should* be.
        # We will verify this path using the output from the previous step.
        # Common locations are .../lib/pkgconfig or .../share/pkgconfig
        env:
          PKG_CONFIG_PATH: ${{ github.workspace }}/cares_install/lib/pkgconfig # <--- ADJUST THIS PATH if previous step shows c-ares.pc elsewhere!
        run: |
          echo "--- Using PKG_CONFIG_PATH=$PKG_CONFIG_PATH ---"

          # --- Start Added Debugging ---
          echo "--- Running pkg-config --debug to trace search for c-ares ---"
          pkg-config --debug --exists c-ares || echo "pkg-config --debug --exists c-ares FAILED (see output above)"

          echo "--- Checking pkg-config's own reported search path variable ---"
          pkg-config --variable pc_path pkg-config || echo "Could not get pkg-config search path variable"
          # --- End Added Debugging ---

          echo "--- Running main check: pkg-config --exists --print-errors c-ares ---"
          pkg-config --exists --print-errors c-ares || (echo "ERROR: Final check failed - cannot find c-ares via pkg-config using PKG_CONFIG_PATH=$PKG_CONFIG_PATH" && exit 1)

          echo "--- pkg-config check passed! Getting static libs flags: ---"
          pkg-config --static --libs c-ares

          echo "--- Proceeding with make (verbose) ---"
          # Use V=1 for verbose make output to see the exact compile/link commands
          make -C frontend V=1

      # STEP 3: Run Tests (Remains the same, but benefits from correct build)
      - name: Run Tests
        env:
          # Pass the potentially adjusted PKG_CONFIG_PATH here too
          PKG_CONFIG_PATH: ${{ github.workspace }}/cares_install/lib/pkgconfig # <--- ADJUST THIS PATH if needed
          LD_LIBRARY_PATH: ${{ github.workspace }}/cares_install/lib # May not be needed for static, but harmless
        run: |
          echo "--- Running tests with PKG_CONFIG_PATH=$PKG_CONFIG_PATH ---"
          make -C frontend test

      # STEP 4: Check Linkage (Remains the same, but now more likely to succeed)
      - name: Check Binary Linkage and Size
        run: |
          echo "--- Checking grewal binary ---"
          if [ -f frontend/grewal ]; then
            ls -lh frontend/grewal
            ldd frontend/grewal
          else
            echo "grewal binary not found (build likely failed)"
            exit 1
          fi

      # STEP 5: Upload Artifact (Remains the same)
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grewal-binary
          path: frontend/grewal
          if-no-files-found: warn # Keep as warn, let 'needs' handle job failure

  # STEP 6: Deploy Job (Remains the same, depends on build success)
  deploy:
    name: Deploy grewal binary to VM
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: grewal-binary

      - name: Set Execute Permissions
        run: chmod +x grewal

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy binary to VM
        run: >
          scp -o StrictHostKeyChecking=no \
          grewal \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/grewal_new_deploy

      - name: Execute deployment script on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Stopping grewal service..."
            sudo /usr/bin/systemctl stop grewal.service
            echo "Copying new binary..."
            sudo /usr/bin/cp /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy /usr/local/bin/grewal
            echo "Setting permissions on new binary..."
            sudo chmod +x /usr/local/bin/grewal
            echo "Starting grewal service..."
            sudo /usr/bin/systemctl start grewal.service
            echo "Removing temporary file..."
            rm /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy
            echo "Checking service status..."
            sudo /usr/bin/systemctl status grewal.service --no-pager || true
          EOF
