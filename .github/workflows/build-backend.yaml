# .github/workflows/build-backend.yaml
name: Build, Test, and Deploy C++ Backend

on:
  push:
    branches: [ "master" ] # Trigger on push to master branch
  pull_request:
    branches: [ "master" ] # Optional: Trigger on pull requests targeting master

jobs:
  build:
    name: Build and Test grewal binary
    runs-on: ubuntu-latest # Use a standard GitHub-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libgrpc++-dev \
            libprotobuf-dev \
            protobuf-compiler \
            protobuf-compiler-grpc \
            libre2-dev \
            libgflags-dev \
            libctemplate-dev \
            libgoogle-glog-dev \
            libabsl-dev \
            libssl-dev \
            zlib1g-dev \
            liblzma-dev \
            libunwind-dev \
            libgtest-dev \
            libc-ares-dev # Ensure c-ares dev package is installed

      - name: Build Backend Binary
        # Assumes Makefile is in the 'frontend' directory
        run: make -C frontend

      - name: Run Tests
        # Assumes 'test' target exists in frontend/Makefile and links/runs correctly
        run: make -C frontend test

      - name: Check Binary Linkage and Size
        # Verify static linking (should show minimal dynamic libs like libc, libm, ld-linux)
        run: |
          echo "--- Checking grewal binary ---"
          ls -lh frontend/grewal
          ldd frontend/grewal

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grewal-binary # Name of the artifact
          path: frontend/grewal # Path to the file to upload

  deploy:
    name: Deploy grewal binary to VM
    needs: build # Run only after the 'build' job succeeds
    runs-on: ubuntu-latest
    # Run only on pushes to the master branch, not on pull requests
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: grewal-binary # Must match the upload name

      - name: Set Execute Permissions
        run: chmod +x grewal

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Secret containing the private SSH key
      # Corrected indentation for this step and removed blank line above
      - name: Add Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy binary to VM
        run: >
          scp -o StrictHostKeyChecking=no \
          grewal \
          ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/grewal_new_deploy

      - name: Execute deployment script on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Stopping grewal service..."
            sudo /usr/bin/systemctl stop grewal.service
            echo "Copying new binary..."
            sudo /usr/bin/cp /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy /usr/local/bin/grewal
            echo "Setting permissions on new binary..."
            sudo chmod +x /usr/local/bin/grewal
            echo "Starting grewal service..."
            sudo /usr/bin/systemctl start grewal.service
            echo "Removing temporary file..."
            rm /home/${{ secrets.DEPLOY_USER }}/grewal_new_deploy
            echo "Checking service status..."
            sudo /usr/bin/systemctl status grewal.service --no-pager || true # Allow non-zero exit if status fails immediately
          EOF
