admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901 # Admin port

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8888 # Main listener port Nginx proxies to
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          # Enable gRPC-Web translation
          http_filters:
          - name: envoy.filters.http.grpc_web
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
          # Enable CORS filter (adjust origins as needed)
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              # Add configuration here if needed, e.g., allow_origin_string_match
          # Router filter must be last
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"] # Or specify your domain(s)
              routes:
              # Route all gRPC requests (or specific paths) to the backend cluster
              - match:
                  prefix: "/" # Or match specific gRPC service/method: /grewal.HomeGeneral/
                  grpc: {} # Match only gRPC requests
                route:
                  cluster: service_grpc # Route to the backend cluster defined below
                  timeout: 0s # Use 0s for streaming RPCs, or set a timeout
                  # Add CORS policy if needed at the route level
                  # cors:
                  #   allow_origin_string_match:
                  #     - safe_regex:
                  #         google_re2: {}
                  #         regex: ".*" # Adjust as needed
                  #   allow_methods: GET, PUT, DELETE, POST, OPTIONS
                  #   allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                  #   max_age: "1728000"
                  #   expose_headers: custom-header-1,grpc-status,grpc-message
              # Add other routes here if needed (e.g., for health checks)

  clusters:
  # Define the cluster that points to the backend gRPC service
  - name: service_grpc
    connect_timeout: 1s
    # --- CHANGE FOR STEP 13: Use Consul DNS ---
    type: LOGICAL_DNS
    # Optional: Force IPv4 resolution if needed
    # dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: service_grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                # Target the Consul service DNS name
                address: grewal-backend.service.consul
                # Target the actual port the backend listens on
                port_value: 50051
    # --- END CHANGE FOR STEP 13 ---
    # Specify that the upstream uses HTTP/2 (required for gRPC)
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}

# Optional: Configure tracing if needed
# tracing:
#   http:
#     name: envoy.tracers.zipkin
#     typed_config:
#       "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
#       collector_cluster: zipkin
#       collector_endpoint: "/api/v2/spans"
#       shared_span_context: false
#       collector_endpoint_version: HTTP_JSON
